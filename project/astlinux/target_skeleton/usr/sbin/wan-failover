#!/bin/bash
##
## Linux WAN failover script.
##
## Original: http://code.google.com/p/wanfailoverscript/
## Copyright 2010 Louwrentius
##
## Copyright 2014 Modified for AstLinux
##
## Licence = GNU GPL
##

. /etc/rc.conf

LOCKFILE="/var/lock/wan-failover.lock"
PIDFILE="/var/run/wan-failover.pid"
STARTFILE="/var/run/wan-failover.start"
STATUSFILE="/var/log/wan-failover-status.log"
SCRIPTFILE="/mnt/kd/wan-failover.script"

INTERVAL="${WAN_FAILOVER_TEST_INTERVAL:-20}"
MAX_LATENCY="${WAN_FAILOVER_MAX_LATENCY:-1000}"
THRESHOLD="${WAN_FAILOVER_THRESHOLD:-3}"
SECONDARY_DELAY="${WAN_FAILOVER_SECONDARY_DELAY:-900}"
PRIMARY_DELAY="${WAN_FAILOVER_PRIMARY_DELAY:-60}"
VERBOSITY="${WAN_FAILOVER_VERBOSITY:-6}"
NOTIFY="$WAN_FAILOVER_NOTIFY"                # Who to notify with email alerts, space separate
NOTIFY_FROM="$WAN_FAILOVER_NOTIFY_FROM"      # From email header (optional)

# Extract from possible <a@b.tld> format
NOTIFY_FROM="${NOTIFY_FROM##*<}"
NOTIFY_FROM="${NOTIFY_FROM%%>*}"

if [ -z "$NOTIFY_FROM" -a -n "$SMTP_DOMAIN" ]; then
  NOTIFY_FROM="noreply@$SMTP_DOMAIN"
fi

TARGETS_FAILED=0
TEST_INTERVAL=$INTERVAL
NO_OF_TARGETS=0
TEST_FAILOVER=0

PRIMARY_STR="PRIMARY"
SECONDARY_STR="SECONDARY"
WAN_LINK_STR="WAN Link: "
PRIMARY_GW_STR="Primary Gateway: "
SECONDARY_GW_STR="Secondary Gateway: "
SECONDARY_GWIPV6_STR="Secondary IPv6 Gateway: "

log() {
  local TYPE="$1" MESG="$2"

  case $TYPE in

    ERROR)
      log2syslog "$TYPE" "$TYPE $MESG"
      ;;

    DEBUG)
      if [ "$VERBOSITY" = "9" ]; then
        log2syslog "$TYPE" "$TYPE $MESG"
      fi
      ;;

    INFO)
      if [ "$VERBOSITY" != "3" ]; then
        log2syslog "$TYPE" "$TYPE $MESG"
      fi
      ;;

  esac
}

log_all() {

  log "$@"
  echo "wan-failover: $2" >&2
}

log2mail() {
  local TO subject="$1" body="$2" IFS

  unset IFS
  for TO in $NOTIFY; do
    echo "To: ${TO}${NOTIFY_FROM:+
From: \"WAN-$HOSTNAME\" <$NOTIFY_FROM>}
Subject: $subject

$body

[Generated at $(date "+%H:%M:%S on %B %d, %Y")]" | \
    sendmail -t
  done
}

log2syslog() {
  local TYPE="$1" MESG="$2"

  TYPE="$(echo "$TYPE" | tr '[:upper:]' '[:lower:]')"

  logger -t wan-failover -p "daemon.$TYPE" "$MESG"
}

idle_wait()
{
  local time="$1" cnt=0

  while [ -f "$PIDFILE" -a $cnt -lt $time ]; do
    cnt=$((cnt+1))
    sleep 1
  done
}

add_target_static_routes() {
  local x IFS

  NO_OF_TARGETS=0
  unset IFS
  for x in $TARGETS; do
    NO_OF_TARGETS=$((NO_OF_TARGETS+1))
    log DEBUG "Adding static route for host $x"
    ip route add $x ${PRIMARY_GW:+via $PRIMARY_GW} dev $EXTIF
  done
}

remove_target_static_routes() {
  local x IFS

  unset IFS
  for x in $TARGETS; do
    ip route delete $x ${PRIMARY_GW:+via $PRIMARY_GW} dev $EXTIF
  done
}

display_header() {

  log INFO "${WAN_LINK_STR}${ACTIVE_CONNECTION}"
  log INFO "${PRIMARY_GW_STR}${PRIMARY_GW}"
  log INFO "${SECONDARY_GW_STR}${SECONDARY_GW}"
  if [ -n "$SECONDARY_GWIPV6" ]; then
    log INFO "${SECONDARY_GWIPV6_STR}${SECONDARY_GWIPV6}"
  fi
  log INFO "Max latency in millisec: $MAX_LATENCY"
  log INFO "Threshold before failover: $THRESHOLD"
  log INFO "Number of target hosts: $NO_OF_TARGETS"
}

gen_log_status_text() {

  echo "WAN Failover Updated: $(date "+%Y-%m-%d %H:%M:%S")"
  echo "${WAN_LINK_STR}${ACTIVE_CONNECTION}"
  echo "${PRIMARY_GW_STR}${PRIMARY_GW}"
  echo "${SECONDARY_GW_STR}${SECONDARY_GW}"
  if [ -n "$SECONDARY_GWIPV6" ]; then
    echo "${SECONDARY_GWIPV6_STR}${SECONDARY_GWIPV6}"
  fi
  echo "Target IPv4 Hosts: $TARGETS"
}

update_log_status() {

  gen_log_status_text > "$STATUSFILE"
}

targets_ok() {
  local routes cnt

  routes="$(ip route list dev $EXTIF 2>/dev/null)"
  if [ -z "$routes" ]; then
    # No routes implies the interface is down or missing
    # Act as no targets are reachable
    return 0
  fi

  ## Check if the static routes need refreshing
  if ! echo "$routes" | grep -q "^${FIRST_TARGET//./[.]} "; then
    add_target_static_routes
  fi

  cnt="$(fping -4 -a -t $MAX_LATENCY $TARGETS 2>/dev/null | wc -l)"

  return $cnt
}

test_targets() {
  local cnt err

  log DEBUG "Test interval between hosts are $TEST_INTERVAL"

  targets_ok
  cnt=$?

  if [ $cnt -gt 0 ]; then
    if [ $TARGETS_FAILED -gt 0 ] ; then
      TARGETS_FAILED=$((TARGETS_FAILED-1))
    fi
    if [ "$ACTIVE_CONNECTION" = "$PRIMARY_STR" ]; then
      TEST_INTERVAL=$INTERVAL
      err="DEBUG"
    else
      TEST_INTERVAL=2
      err="INFO"
    fi
    log $err "($cnt of $NO_OF_TARGETS) Host Targets OK"
  else
    if [ $TARGETS_FAILED -lt $THRESHOLD ]; then
      TARGETS_FAILED=$((TARGETS_FAILED+1))
    fi
    if [ "$ACTIVE_CONNECTION" = "$PRIMARY_STR" ]; then
      TEST_INTERVAL=2
      err="INFO"
    else
      TEST_INTERVAL=$INTERVAL
      err="DEBUG"
    fi
    log $err "($((NO_OF_TARGETS-cnt)) of $NO_OF_TARGETS) Host Targets UNREACHABLE"
  fi
}

test_wan_status() {

  test_targets
  if [ $TARGETS_FAILED -gt 0 ]; then
    log DEBUG "Failed targets is $TARGETS_FAILED, threshold is $THRESHOLD."
  fi
  if [ $TEST_FAILOVER -eq 1 ]; then
    TEST_FAILOVER=0
    TARGETS_FAILED=$THRESHOLD
  fi
  check_wan_status
  idle_wait $TEST_INTERVAL
}

switch_to_primary() {

  ip route delete 128.0.0.0/1 ${SECONDARY_GW:+via $SECONDARY_GW} dev $EXT2IF
  ip route delete 0.0.0.0/1 ${SECONDARY_GW:+via $SECONDARY_GW} dev $EXT2IF
  if [ -n "$SECONDARY_GWIPV6" ]; then
    ip -6 route delete 2000::/3 via $SECONDARY_GWIPV6 dev $EXT2IF metric 1
  fi
  ACTIVE_CONNECTION="$PRIMARY_STR"
  update_log_status
}

switch_to_secondary() {

  ip route add 0.0.0.0/1 ${SECONDARY_GW:+via $SECONDARY_GW} dev $EXT2IF
  ip route add 128.0.0.0/1 ${SECONDARY_GW:+via $SECONDARY_GW} dev $EXT2IF
  if [ -n "$SECONDARY_GWIPV6" ]; then
    ip -6 route add 2000::/3 via $SECONDARY_GWIPV6 dev $EXT2IF metric 1
  fi
  ACTIVE_CONNECTION="$SECONDARY_STR"
  update_log_status
}

check_wan_status() {

  if [ $TARGETS_FAILED -ge $THRESHOLD -a "$ACTIVE_CONNECTION" = "$PRIMARY_STR" ]; then
    switch
  elif [ $TARGETS_FAILED -eq 0 -a "$ACTIVE_CONNECTION" = "$SECONDARY_STR" ]; then
    switch
  else
    log DEBUG "${WAN_LINK_STR}${ACTIVE_CONNECTION}"
  fi
}

gen_body_text() {

  echo "-- Primary '$EXTIF' routes --"
  ip route list dev $EXTIF
  if [ -n "$SECONDARY_GWIPV6" ]; then
    echo "-- IPv6 --"
    ip -6 route list dev $EXTIF
  fi
  echo "--"
  echo "-- Secondary '$EXT2IF' routes --"
  ip route list dev $EXT2IF
  if [ -n "$SECONDARY_GWIPV6" ]; then
    echo "-- IPv6 --"
    ip -6 route list dev $EXT2IF
  fi
  echo "--"
}

switch() {
  local MESG BODY

  if [ "$ACTIVE_CONNECTION" = "$PRIMARY_STR" ]; then
    switch_to_secondary
    if [ -x $SCRIPTFILE ]; then
      $SCRIPTFILE "$SECONDARY_STR" "$EXTIF" "$PRIMARY_GW" "$EXT2IF" "$SECONDARY_GW" "$SECONDARY_GWIPV6"
    fi
    idle_wait 10
    MESG="Primary WAN link failed on '$HOSTNAME'. Switched to secondary link."
    BODY="$(gen_body_text)"
    log2mail "$MESG" "$BODY"
    log INFO "$MESG"
    log DEBUG "Failover Hysteresis started, sleeping for $SECONDARY_DELAY seconds."
    idle_wait $SECONDARY_DELAY

  elif [ "$ACTIVE_CONNECTION" = "$SECONDARY_STR" ]; then
    switch_to_primary
    if [ -x $SCRIPTFILE ]; then
      $SCRIPTFILE "$PRIMARY_STR" "$EXTIF" "$PRIMARY_GW" "$EXT2IF" "$SECONDARY_GW" "$SECONDARY_GWIPV6"
    fi
    idle_wait 10
    MESG="Primary WAN link OK on '$HOSTNAME'. Switched back to primary link."
    BODY="$(gen_body_text)"
    log2mail "$MESG" "$BODY"
    log INFO "$MESG"
    log DEBUG "Failback Hysteresis started, sleeping for $PRIMARY_DELAY seconds."
    idle_wait $PRIMARY_DELAY
  fi
}

test_switch() {

  if [ "$ACTIVE_CONNECTION" = "$PRIMARY_STR" ]; then
    log INFO "Testing failover link, switching to secondary link within $TEST_INTERVAL seconds..."
    TEST_FAILOVER=1
  else
    log INFO "Testing ignored, currently using secondary link."
  fi
}

start_monitor() {

  # Robust 'bash' method of creating/testing for a lockfile
  if ! ( set -o noclobber; echo "$$" > "$LOCKFILE" ) 2>/dev/null; then
    log ERROR "wan-failover: already running, lockfile \"$LOCKFILE\" exists, process id: $(cat "$LOCKFILE")."
    return 9
  fi

  # Load 'sleep' builtin if it exists
  if [ -f /usr/lib/bash/sleep ]; then
    enable -f /usr/lib/bash/sleep sleep
  fi

  trap 'test_switch' HUP

  trap 'remove_target_static_routes; rm -f "$LOCKFILE" "$PIDFILE"; exit $?' INT TERM EXIT

  echo "$BASHPID" > "$PIDFILE"

  log INFO "Starting monitoring of WAN link."

  add_target_static_routes
  display_header
  update_log_status

  while [ -f "$PIDFILE" ]; do
    test_wan_status
  done

  remove_target_static_routes

  log INFO "Stopping monitoring of WAN link."

  rm -f "$LOCKFILE" "$PIDFILE"
  trap - HUP INT TERM EXIT

  return 0
}

## Reset flag, when set, on a network change wan-failover should be started if not already running
rm -f "$STARTFILE"

## Override the 2nd external interface if WAN_FAILOVER_SECONDARY_GW is defined
if [ -n "$WAN_FAILOVER_SECONDARY_GW" ]; then
  EXT2IF="$(ip -o route get $WAN_FAILOVER_SECONDARY_GW | sed -n -r -e 's/^.* dev +([^ ]+).*$/\1/p')"
  EXT2GW="$WAN_FAILOVER_SECONDARY_GW"
  EXT2GWIPV6="$WAN_FAILOVER_SECONDARY_GWIPV6"
fi

if [ -z "$EXTIF" ]; then
  log_all ERROR "Primary interface is not set, define: EXTIF"
  exit 1
fi
if [ -z "$EXT2IF" ]; then
  log_all ERROR "Secondary interface is not set, define: EXT2IF"
  exit 1
fi

FIRST_TARGET=""
TARGETS=""
unset IFS
for x in $WAN_FAILOVER_TARGETS; do
  # Sanitize for manual IPv4 addresses
  if [ -z "$(echo "$x" | tr -d '0-9.')" ]; then
    TARGETS="$TARGETS${TARGETS:+ }$x"
    if [ -z "$FIRST_TARGET" ]; then
      FIRST_TARGET="$x"
    fi
  fi
done
if [ -z "$FIRST_TARGET" ]; then
  log_all ERROR "No IPv4 targets to test availability, define: WAN_FAILOVER_TARGETS"
  exit 1
fi

if ! which fping >/dev/null 2>&1; then
  log_all ERROR "The command 'fping' is not available, exiting."
  exit 1
fi

PRIMARY_GW="$(ip route list dev $EXTIF 2>/dev/null | sed -n -r -e 's/^default .*via +([^ ]+).*$/\1/p')"
if [ -z "$PRIMARY_GW" -a "${EXTIF%[0-9]}" != "ppp" ]; then
  echo "1" > "$STARTFILE"
  log_all ERROR "Primary interface gateway not found, will restart on a network change."
  exit 1
fi

if [ -n "$EXT2GW" ]; then
  SECONDARY_GW="$EXT2GW"
elif [ -f "/tmp/udhcpc-${EXT2IF}.conf" ]; then
  SECONDARY_GW="$(sed -n -r -e 's/^GW=([0-9.]+).*$/\1/p' "/tmp/udhcpc-${EXT2IF}.conf" | head -n1)"
fi
if [ -z "$SECONDARY_GW" -a "${EXT2IF%[0-9]}" != "ppp" ]; then
  echo "1" > "$STARTFILE"
  log_all ERROR "Secondary interface gateway not found, will restart on a network change."
  exit 1
fi

if [ "$IPV6" = "yes" -a -n "$EXT2GWIPV6" ]; then
  SECONDARY_GWIPV6="$EXT2GWIPV6"
else
  SECONDARY_GWIPV6=""
fi

if [ -n "$SECONDARY_GW" ] && [ "$SECONDARY_GW" = "$(ip route list dev $EXT2IF 2>/dev/null | sed -n -r -e 's|^0.0.0.0/1 .*via +([^ ]+).*$|\1|p')" ]; then
  ACTIVE_CONNECTION="$SECONDARY_STR"
elif [ -z "$SECONDARY_GW" ] && ip route list dev $EXT2IF 2>/dev/null | grep -q '^0.0.0.0/1 '; then
  ACTIVE_CONNECTION="$SECONDARY_STR"
else
  ACTIVE_CONNECTION="$PRIMARY_STR"

  ## Cleanup possible stale routes if certain config variables are changed and this script restarted
  ## Use the status file for the old state information
  ##
  if [ -f "$STATUSFILE" ]; then
    if grep -q "^${WAN_LINK_STR}${SECONDARY_STR}" "$STATUSFILE"; then
      oldgw="$(sed -n -r -e "s/^${SECONDARY_GW_STR}([0-9.]+).*$/\1/p" "$STATUSFILE")"
      oldgwipv6="$(sed -n -r -e "s/^${SECONDARY_GWIPV6_STR}([0-9a-fA-F:]+).*$/\1/p" "$STATUSFILE")"
      if [ -n "$oldgw" ]; then
        unset IFS
        for x in $(ip route list 2>/dev/null | sed -n -r -e 's|^0.0.0.0/1 .*via +([^ ]+).*$|\1|p'); do
          if [ "$x" = "$oldgw" ]; then
            oldif="$(ip -o route get $oldgw | sed -n -r -e 's/^.* dev +([^ ]+).*$/\1/p')"
            if [ "$oldif" ]; then
              ip route delete 128.0.0.0/1 via $oldgw dev $oldif
              ip route delete 0.0.0.0/1 via $oldgw dev $oldif
              if [ -n "$oldgwipv6" ]; then
                ip -6 route delete 2000::/3 via $oldgwipv6 dev $oldif metric 1
              fi
            fi
          fi
        done
      fi
    fi
  fi
fi

start_monitor >/dev/null 2>&1 &

