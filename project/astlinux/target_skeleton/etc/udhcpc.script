#!/bin/sh

# $Id: udhcpc.script 1681 2004-09-01 18:12:49Z  $
# Modified for AstLinux

[ -z "$1" ] && echo "Error: should be called from udhcpc" && exit 1

. /etc/rc.conf

resolv_conf="/tmp/etc/resolv-up.conf"

udhcpc_conf="/tmp/udhcpc-${interface}.conf"

ACTION="$1"

gen_udhcpc_conf() {
  local i IFS

  echo "IP=${ip}
BCAST=${broadcast}
NETMASK=${subnet}"

  unset IFS
  for i in ${router}; do
    echo "GW=$i"
  done

  if [ -n "${domain}" ]; then
    echo "DOMAIN=${domain}"
  fi

  for i in ${dns}; do
    echo "DNS=$i"
  done
}

gen_resolv_conf() {
  local i IFS

  if [ -n "${domain}" ]; then
    echo "search ${domain}"
  fi

  unset IFS
  for i in ${dns}; do
    echo "udhcpc: adding resolver ${i}" >&2
    echo "nameserver ${i}"
  done
}

add_routes()
{
  local i x metric IFS

  metric=0
  unset IFS
  for i in ${router}; do
    if [ "$EXTIF" = "${interface}" ]; then
      echo "udhcpc: adding default route via ${i}" >&2
      ip route add default via ${i} dev ${interface} metric $metric
    elif [ "$EXT2IF" = "${interface}" ]; then
      for x in $EXT2ROUTES; do
        echo "udhcpc: adding ${x} route via ${i}" >&2
        ip route add ${x} via ${i} dev ${interface} metric $metric
      done
    fi
    metric=$((metric+1))
  done
}

restart_failover_service()
{
  # Restart Failover script if running or waiting to start
  if [ -f /var/run/wan-failover.pid -o -f /var/run/wan-failover.start ]; then
    /etc/init.d/failover restart >/dev/null 2>&1 &
  fi
}

case "$ACTION" in

  leasefail)
    # If no DHCP lease is established, generate a temporary 169.254/16 (RFC 3927) IPv4 Link-Local address
    if [ "$EXTIF" = "${interface}" ]; then
      ip link set dev ${interface} up

      if [ ! -f /tmp/auto_mydhcpip ]; then
        echo "169.254.$((RANDOM % 251 + 2)).$((RANDOM % 251 + 2))" > /tmp/auto_mydhcpip
        chmod 600 /tmp/auto_mydhcpip
      fi
      if [ ! -f /tmp/mydhcpip ] || ! cmp -s /tmp/mydhcpip /tmp/auto_mydhcpip; then
        auto_ip="$(cat /tmp/auto_mydhcpip)"
        auto_gw="169.254.0.${auto_ip##*.}"
        logger -s -t udhcpc.script -p daemon.warning "Assigning auto-configured IPv4 $auto_ip to interface ${interface}"
        echo "IP=$auto_ip
BCAST=169.254.255.255
NETMASK=255.255.0.0
GW=$auto_gw" > "$udhcpc_conf"

        echo "$auto_ip" > /tmp/mydhcpip
        : > "$resolv_conf"

        ip -4 addr flush dev ${interface} scope global
        ip -4 addr add $auto_ip/255.255.0.0 brd 169.254.255.255 dev ${interface}

        ip route add default via $auto_gw dev ${interface} metric 0
        restart_failover_service
      fi
    fi
    ;;

  deconfig)
    ip link set dev ${interface} up
    ip -4 addr flush dev ${interface} scope global
    if [ "$EXTIF" = "${interface}" ]; then
      rm -f /tmp/mydhcpip
    fi
    rm -f "$udhcpc_conf"
    ;;

  bound)
    ip link set dev ${interface} up
    gen_udhcpc_conf > "$udhcpc_conf"

    if [ "$EXTIF" = "${interface}" ]; then
      echo "${ip}" > /tmp/mydhcpip
      gen_resolv_conf > "$resolv_conf"
    fi

    ip -4 addr flush dev ${interface} scope global
    ip -4 addr add ${ip}/${subnet} brd ${broadcast:-+} dev ${interface}

    if [ -n "${router}" ]; then
      add_routes
      restart_failover_service
    fi
    ;;

  renew)
    gen_udhcpc_conf > "${udhcpc_conf}.new"

    if [ -f "$udhcpc_conf" ] && cmp -s "$udhcpc_conf" "${udhcpc_conf}.new"; then
      rm -f "${udhcpc_conf}.new"
    else
      mv "${udhcpc_conf}.new" "$udhcpc_conf"

      if [ "$EXTIF" = "${interface}" ]; then
        echo "${ip}" > /tmp/mydhcpip
        gen_resolv_conf > "$resolv_conf"
      fi

      ip -4 addr flush dev ${interface} scope global
      ip -4 addr add ${ip}/${subnet} brd ${broadcast:-+} dev ${interface}

      if [ -n "${router}" ]; then
        add_routes
        restart_failover_service
      fi
    fi
    ;;

esac

exit 0
