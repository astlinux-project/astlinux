From 0bfb546a4b6bbc4540f049f130e3a22f18e46f88 Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Fri, 4 Aug 2023 00:11:27 +0200
Subject: [PATCH 1/3] For SP800-90B ensure stable H_submitter

The H_submitter direclty depends on the selected oversampling rate.
The Jitter RNG API of jent_entropy_read_safe, however automatically
changes the OSR if there was a health failure. This implies that the
H_submitter changes.

When enabling the SP800-90B compliance mode, use jent_entropy_read
which fails directly on the health failure guaranteeing a stable
H_submitter.

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 jitterentropy-rngd.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/jitterentropy-rngd.c b/jitterentropy-rngd.c
index 7a23a26..a4b9f9b 100644
--- a/jitterentropy-rngd.c
+++ b/jitterentropy-rngd.c
@@ -452,7 +452,16 @@ static size_t write_random_90B(struct kernel_rng *rng, char *buf, size_t len,
 
 static ssize_t read_jent(struct kernel_rng *rng, char *buf, size_t buflen)
 {
-	ssize_t ret = jent_read_entropy_safe(&rng->ec, buf, buflen);
+	ssize_t ret;
+
+	/*
+	 *jent_read_entropy_safe implies a changing H_submitter which is not
+	 * allowed in SP800-90B.
+	 */
+	if (force_sp80090b)
+		ret = jent_read_entropy(rng->ec, buf, buflen);
+	else
+		ret = jent_read_entropy_safe(&rng->ec, buf, buflen);
 
 	if (ret >= 0)
 		return ret;
-- 
2.39.2


From 9155d52f673fbb616281d0d1f5fa288799e579a9 Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Tue, 6 Feb 2024 08:24:23 +0100
Subject: [PATCH 2/3] Gracefully handling errors

The following improved error handling is added. This is needed to gracefully
operate with the ESDM (https://chronox.de/esdm) in edge conditions:

- handle write system call failures by deallocating and allocating the
entropy source which includes closing and opening the file descriptor to
/dev/random

- use proper variable types (ssize_t vs size_t) to avoid implicit casts

- bug fix the issue where the rngd thinks the kernel received sufficient
amount of entropy already although the kernel wants more

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 jitterentropy-rngd.c | 91 ++++++++++++++++++++++++++++++++------------
 1 file changed, 67 insertions(+), 24 deletions(-)

diff --git a/jitterentropy-rngd.c b/jitterentropy-rngd.c
index a4b9f9b..3809fc2 100644
--- a/jitterentropy-rngd.c
+++ b/jitterentropy-rngd.c
@@ -361,21 +361,27 @@ static inline void memset_secure(void *s, int c, size_t n)
  * entropy handler functions
  *******************************************************************/
 
-static size_t write_random(struct kernel_rng *rng, char *buf, size_t len,
-			   size_t entropy_bytes, int force_reseed)
+static ssize_t write_random(struct kernel_rng *rng, char *buf, size_t len,
+			    size_t entropy_bytes, int force_reseed)
 {
-	size_t written = 0;
+	ssize_t written = 0;
 	int ret;
 
+	if (len > SSIZE_MAX)
+		return -EOVERFLOW;
+
 	 /* value is in bits */
 	rng->rpi->entropy_count = (entropy_bytes * 8);
 	rng->rpi->buf_size = len;
 	memcpy(rng->rpi->buf, buf, len);
 
 	ret = ioctl(rng->fd, RNDADDENTROPY, rng->rpi);
-	if (0 > ret)
-		dolog(LOG_WARN, "Error injecting entropy: %s", strerror(errno));
-	else {
+	if (0 > ret) {
+		int errsv = errno;
+
+		dolog(LOG_WARN, "Error injecting entropy: %s", strerror(errsv));
+		return -errsv;
+	} else {
 		dolog(LOG_DEBUG, "Injected %u bytes with an entropy count of %u bytes of entropy",
 		      len, entropy_bytes);
 		written = len;
@@ -424,16 +430,20 @@ static size_t write_random(struct kernel_rng *rng, char *buf, size_t len,
  * from the Jitter-RNG.
  */
 #define SHA1_FOLD_OUTPUT_SIZE	10
-static size_t write_random_90B(struct kernel_rng *rng, char *buf, size_t len,
-			       size_t entropy_bytes, int force_reseed)
+static ssize_t write_random_90B(struct kernel_rng *rng, char *buf, size_t len,
+				size_t entropy_bytes, int force_reseed)
 {
 	size_t written = 0, ptr;
 
 	if (!force_reseed)
 		return write_random(rng, buf, len, entropy_bytes, force_reseed);
 
+	if (len > SSIZE_MAX)
+		return -EOVERFLOW;
+
 	for (ptr = 0; ptr < len; ptr += SHA1_FOLD_OUTPUT_SIZE) {
 		size_t todo = len - ptr, ent;
+		ssize_t out;
 
 		if (todo > SHA1_FOLD_OUTPUT_SIZE)
 			todo = SHA1_FOLD_OUTPUT_SIZE;
@@ -443,8 +453,12 @@ static size_t write_random_90B(struct kernel_rng *rng, char *buf, size_t len,
 			ent = entropy_bytes;
 		entropy_bytes -= ent;
 
-		written += write_random(rng, buf + ptr, todo, ent,
-					force_reseed);
+		out = write_random(rng, buf + ptr, todo, ent, force_reseed);
+
+		if (out < 0)
+			return out;
+
+		written += out;
 	}
 
 	return written;
@@ -471,7 +485,7 @@ static ssize_t read_jent(struct kernel_rng *rng, char *buf, size_t buflen)
 	return -EFAULT;
 }
 
-static size_t gather_entropy(struct kernel_rng *rng, int init)
+static ssize_t gather_entropy(struct kernel_rng *rng, int init)
 {
 	sigset_t blocking_set, previous_set;
 #define ENTBLOCKSIZE	(ENTROPYBYTES * OVERSAMPLINGFACTOR)
@@ -485,8 +499,8 @@ static size_t gather_entropy(struct kernel_rng *rng, int init)
  */
 #define ENTBLOCKS	(4 + 2 + 1)
 	char buf[(ENTBLOCKSIZE * ENTBLOCKS)];
-	size_t buflen = ENTBLOCKSIZE;
-	size_t ret = 0;
+	ssize_t buflen = ENTBLOCKSIZE;
+	ssize_t ret = 0;
 
 	sigemptyset(&previous_set);
 	sigemptyset(&blocking_set);
@@ -541,7 +555,7 @@ static size_t gather_entropy(struct kernel_rng *rng, int init)
 				       buflen / OVERSAMPLINGFACTOR, 0);
 	}
 
-	if (buflen != ret) {
+	if (ret >= 0 && buflen != ret) {
 		dolog(LOG_WARN, "Injected %lu bytes into %s, expected %d",
 		      ret, rng->dev, buflen);
 		ret = 0;
@@ -584,6 +598,8 @@ static int read_entropy_value(int fd)
 /*******************************************************************
  * Signal handling functions
  *******************************************************************/
+static void dealloc(void);
+static int alloc(void);
 
 /*
  * Wakeup and check entropy_avail -- this covers the drain of entropy
@@ -592,7 +608,7 @@ static int read_entropy_value(int fd)
 static void sig_entropy_avail(int sig)
 {
 	int entropy = 0, thresh = 0;
-	size_t written = 0;
+	ssize_t written = 0;
 	static unsigned int force_reseed = FORCE_RESEED_WAKEUPS;
 
 	(void)sig;
@@ -602,8 +618,16 @@ static void sig_entropy_avail(int sig)
 	if (--force_reseed == 0) {
 		force_reseed = FORCE_RESEED_WAKEUPS;
 		dolog(LOG_DEBUG, "Force reseed", entropy);
-		written = gather_entropy(&Random, 0);
-		dolog(LOG_VERBOSE, "%lu bytes written to /dev/random", written);
+		do {
+			if (written < 0) {
+				dolog(LOG_DEBUG, "Re-initializing rngd\n");
+				dealloc();
+				if (alloc() < 0)
+					goto out;
+			}
+			written = gather_entropy(&Random, 0);
+		} while (written < 0);
+		dolog(LOG_VERBOSE, "%zd bytes written to /dev/random", written);
 		goto out;
 	}
 
@@ -612,13 +636,22 @@ static void sig_entropy_avail(int sig)
 
 	if (0 == entropy || 0 == thresh)
 		goto out;
-	if (entropy < thresh) {
+	if (entropy >= thresh) {
 		dolog(LOG_DEBUG, "Sufficient entropy %d available", entropy);
 		goto out;
 	}
-	dolog(LOG_DEBUG, "Insufficient entropy %d available", entropy);
-	written = gather_entropy(&Random, 0);
-	dolog(LOG_VERBOSE, "%lu bytes written to /dev/random", written);
+	dolog(LOG_DEBUG, "Insufficient entropy %d available (threshold %d)",
+	      entropy, thresh);
+	do {
+		if (written < 0) {
+			dolog(LOG_DEBUG, "Re-initializing rngd\n");
+			dealloc();
+			if (alloc() < 0)
+				goto out;
+		}
+		written = gather_entropy(&Random, 0);
+	} while (written < 0);
+	dolog(LOG_VERBOSE, "%zd bytes written to /dev/random", written);
 out:
 	install_alarm();
 	return;
@@ -650,7 +683,7 @@ static void select_fd(void)
 {
 	fd_set fds;
 	int ret = 0;
-	size_t written = 0;
+	ssize_t written = 0;
 
 	while (1) {
 		FD_ZERO(&fds);
@@ -663,8 +696,18 @@ static void select_fd(void)
 			dolog(LOG_ERR, "Select returned with error %s", strerror(errno));
 		if (0 <= ret) {
 			dolog(LOG_VERBOSE, "Wakeup call for select on /dev/random");
-			written = gather_entropy(&Random, 0);
-			dolog(LOG_VERBOSE, "%lu bytes written to /dev/random", written);
+			do {
+				if (written < 0) {
+					dolog(LOG_DEBUG,
+					      "Re-initializing rngd\n");
+					dealloc();
+					if (alloc() < 0)
+						continue;
+				}
+				written = gather_entropy(&Random, 0);
+			} while (written < 0);
+			dolog(LOG_VERBOSE, "%zd bytes written to /dev/random",
+			      written);
 		}
 	}
 }
-- 
2.39.2


From 0d6a4fa2572998ab551e27c1feb211ec78f76181 Mon Sep 17 00:00:00 2001
From: abelbeck <lonnie@abelbeck.com>
Date: Tue, 4 Jun 2024 08:32:23 -0500
Subject: [PATCH 3/3] Adjust the alarm period in two phases PHASE1: 120(force
 reseed wakeups) * 5(alarm period) == 600s PHASE2: 12(force reseed wakeups) *
 50(alarm period) == 600s Reducing the number of reads of
 "/proc/sys/kernel/random/entropy_avail" and
 "/proc/sys/kernel/random/write_wakeup_threshold" after the first 10 minutes.

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 jitterentropy-rngd.c | 30 ++++++++++++++++++------------
 1 file changed, 18 insertions(+), 12 deletions(-)

diff --git a/jitterentropy-rngd.c b/jitterentropy-rngd.c
index 3809fc2..3eb3020 100644
--- a/jitterentropy-rngd.c
+++ b/jitterentropy-rngd.c
@@ -106,17 +106,21 @@ static unsigned int jent_osr = 1;
 #define ENTROPYBYTES 32
 #define OVERSAMPLINGFACTOR 2
 /*
- * After FORCE_RESEED_WAKEUPS, the installed alarm handler will unconditionally
- * trigger a reseed irrespective of the seed level. This ensures that new
- * seed is added after FORCE_RESEED_WAKEUPS * (alarm period defined in
- * install_alarm) == 120 * 5 == 600s.
+ * After (force reseed wakeups), the installed alarm handler will unconditionally
+ * trigger a reseed irrespective of the seed level in two phases. This ensures
+ * that new seed is added after every (force reseed wakeups) * (alarm period).
+ * PHASE1: 120(force reseed wakeups) * 5(alarm period) == 600s
+ * PHASE2: 12(force reseed wakeups) * 50(alarm period) == 600s
  */
-#define FORCE_RESEED_WAKEUPS	120
+#define FORCE_RESEED_WAKEUPS_PHASE1	120
+#define ALARM_PERIOD_PHASE1	5
+#define FORCE_RESEED_WAKEUPS_PHASE2	12
+#define ALARM_PERIOD_PHASE2	50
 #define ENTROPYAVAIL "/proc/sys/kernel/random/entropy_avail"
 #define ENTROPYTHRESH "/proc/sys/kernel/random/write_wakeup_threshold"
 #define LRNG_FILE "/proc/lrng_type"
 
-static void install_alarm(void);
+static void install_alarm(unsigned int secs);
 static void dealloc(void);
 static void dealloc_rng(struct kernel_rng *rng);
 
@@ -609,14 +613,16 @@ static void sig_entropy_avail(int sig)
 {
 	int entropy = 0, thresh = 0;
 	ssize_t written = 0;
-	static unsigned int force_reseed = FORCE_RESEED_WAKEUPS;
+	static unsigned int force_reseed = FORCE_RESEED_WAKEUPS_PHASE1;
+	static unsigned int alarm_period = ALARM_PERIOD_PHASE1;
 
 	(void)sig;
 
 	dolog(LOG_VERBOSE, "Wakeup call for alarm on %s", ENTROPYAVAIL);
 
 	if (--force_reseed == 0) {
-		force_reseed = FORCE_RESEED_WAKEUPS;
+		force_reseed = FORCE_RESEED_WAKEUPS_PHASE2;
+		alarm_period = ALARM_PERIOD_PHASE2;
 		dolog(LOG_DEBUG, "Force reseed", entropy);
 		do {
 			if (written < 0) {
@@ -653,7 +659,7 @@ static void sig_entropy_avail(int sig)
 	} while (written < 0);
 	dolog(LOG_VERBOSE, "%zd bytes written to /dev/random", written);
 out:
-	install_alarm();
+	install_alarm(alarm_period);
 	return;
 }
 
@@ -712,13 +718,13 @@ static void select_fd(void)
 	}
 }
 
-static void install_alarm(void)
+static void install_alarm(unsigned int secs)
 {
 	if (lrng_present())
 		return;
 	dolog(LOG_DEBUG, "Install alarm signal handler");
 	signal(SIGALRM, sig_entropy_avail);
-	alarm(5);
+	alarm(secs);
 }
 
 static void install_term(void)
@@ -928,7 +934,7 @@ int main(int argc, char *argv[])
 	if (0 == Verbosity)
 		daemonize();
 	install_term();
-	install_alarm();
+	install_alarm(ALARM_PERIOD_PHASE1);
 	select_fd();
 	/* NOTREACHED */
 	dealloc();
-- 
2.39.2

