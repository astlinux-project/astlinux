From 0de79e4bb4114b60155fe3641ff410f48d99bc1d Mon Sep 17 00:00:00 2001
From: nanang <nanang@localhost>
Date: Wed, 15 May 2019 02:54:52 +0000
Subject: [PATCH] Re #2191: Fixed crash in SIP transport destroy due to bug
 introduced by r5971, i.e: group lock is set after registering tp to tpmgr, so
 tpmgr won't call pj_grp_lock_add_ref(), but in unregisteration, group lock is
 set, so tpmgr will call pj_grp_lock_dec_ref().

---
 pjsip/src/pjsip/sip_transport_tls.c | 29 +++++++++++------------------
 pjsip/src/pjsip/sip_transport_udp.c | 21 +++++++++++++++------
 2 files changed, 26 insertions(+), 24 deletions(-)

diff --git a/pjsip/src/pjsip/sip_transport_tls.c b/pjsip/src/pjsip/sip_transport_tls.c
index a8468e092..466877edf 100644
--- a/pjsip/src/pjsip/sip_transport_tls.c
+++ b/pjsip/src/pjsip/sip_transport_tls.c
@@ -161,6 +161,7 @@ static pj_status_t tls_create(struct tls_listener *listener,
 			      const pj_sockaddr *local,
 			      const pj_sockaddr *remote,
 			      const pj_str_t *remote_name,
+			      pj_grp_lock_t *glock,
 			      struct tls_transport **p_tls);
 
 
@@ -789,6 +790,7 @@ static pj_status_t tls_create( struct tls_listener *listener,
 			       const pj_sockaddr *local,
 			       const pj_sockaddr *remote,
 			       const pj_str_t *remote_name,
+			       pj_grp_lock_t *glock,
 			       struct tls_transport **p_tls)
 {
     struct tls_transport *tls;
@@ -873,6 +875,11 @@ static pj_status_t tls_create( struct tls_listener *listener,
 
     tls->ssock = ssock;
 
+    /* Set up the group lock */
+    tls->grp_lock = tls->base.grp_lock = glock;
+    pj_grp_lock_add_ref(tls->grp_lock);
+    pj_grp_lock_add_handler(tls->grp_lock, pool, tls, &tls_on_destroy);
+
     /* Register transport to transport manager */
     status = pjsip_transport_register(listener->tpmgr, &tls->base);
     if (status != PJ_SUCCESS) {
@@ -1230,20 +1237,13 @@ static pj_status_t lis_create_transport(pjsip_tpfactory *factory,
 
     /* Create the transport descriptor */
     status = tls_create(listener, pool, ssock, PJ_FALSE, &local_addr, 
-			rem_addr, &remote_name, &tls);
-    if (status != PJ_SUCCESS) {
-	pj_grp_lock_destroy(glock);
+			rem_addr, &remote_name, glock, &tls);
+    if (status != PJ_SUCCESS)
 	return status;
-    }
 
     /* Set the "pending" SSL socket user data */
     pj_ssl_sock_set_user_data(tls->ssock, tls);
 
-    /* Set up the group lock */
-    tls->grp_lock = tls->base.grp_lock = glock;
-    pj_grp_lock_add_ref(tls->grp_lock);
-    pj_grp_lock_add_handler(tls->grp_lock, pool, tls, &tls_on_destroy);
-
     /* Start asynchronous connect() operation */
     tls->has_pending_connect = PJ_TRUE;
     status = pj_ssl_sock_start_connect(tls->ssock, tls->base.pool, 
@@ -1361,7 +1361,8 @@ static pj_bool_t on_accept_complete2(pj_ssl_sock_t *ssock,
      * Create TLS transport for the new socket.
      */
     status = tls_create( listener, NULL, new_ssock, PJ_TRUE,
-			 &ssl_info.local_addr, &tmp_src_addr, NULL, &tls);
+			 &ssl_info.local_addr, &tmp_src_addr, NULL,
+			 ssl_info.grp_lock, &tls);
     
     if (status != PJ_SUCCESS)
 	return PJ_TRUE;
@@ -1369,14 +1370,6 @@ static pj_bool_t on_accept_complete2(pj_ssl_sock_t *ssock,
     /* Set the "pending" SSL socket user data */
     pj_ssl_sock_set_user_data(new_ssock, tls);
 
-    /* Set up the group lock */
-    if (ssl_info.grp_lock) {
-	tls->grp_lock = ssl_info.grp_lock;
-	pj_grp_lock_add_ref(tls->grp_lock);
-	pj_grp_lock_add_handler(tls->grp_lock, tls->base.pool, tls,
-				&tls_on_destroy);
-    }
-
     /* Prevent immediate transport destroy as application may access it 
      * (getting info, etc) in transport state notification callback.
      */
diff --git a/pjsip/src/pjsip/sip_transport_udp.c b/pjsip/src/pjsip/sip_transport_udp.c
index c02c48a03..905487dd9 100644
--- a/pjsip/src/pjsip/sip_transport_udp.c
+++ b/pjsip/src/pjsip/sip_transport_udp.c
@@ -470,6 +470,16 @@ static pj_status_t udp_destroy( pjsip_transport *transport )
 	    break;
     }
 
+    /* When creating this transport, reference count was incremented to flag
+     * this transport as permanent so it will not be destroyed by transport
+     * manager whenever idle. Application may or may not have cleared the
+     * flag (by calling pjsip_transport_dec_ref()), so in case it has not,
+     * let's do it now, so this transport can be destroyed.
+     */
+    if (pj_atomic_get(tp->base.ref_cnt) > 0)
+	pjsip_transport_dec_ref(&tp->base);
+
+    /* Destroy transport */
     if (tp->grp_lock) {
 	pj_grp_lock_t *grp_lock = tp->grp_lock;
 	tp->grp_lock = NULL;
@@ -850,18 +860,17 @@ static pj_status_t transport_attach( pjsip_endpoint *endpt,
     tp->base.do_shutdown = &udp_shutdown;
     tp->base.destroy = &udp_destroy;
 
-    /* This is a permanent transport, so we initialize the ref count
-     * to one so that transport manager don't destroy this transport
-     * when there's no user!
-     */
-    pj_atomic_inc(tp->base.ref_cnt);
-
     /* Register to transport manager. */
     tp->base.tpmgr = pjsip_endpt_get_tpmgr(endpt);
     status = pjsip_transport_register( tp->base.tpmgr, (pjsip_transport*)tp);
     if (status != PJ_SUCCESS)
 	goto on_error;
 
+    /* This is a permanent transport, so we initialize the ref count
+     * to one so that transport manager won't destroy this transport
+     * when there's no user!
+     */
+    pjsip_transport_add_ref(&tp->base);
 
     /* Create rdata and put it in the array. */
     tp->rdata_cnt = 0;
-- 
2.21.0

