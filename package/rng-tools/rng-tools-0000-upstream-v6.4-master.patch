From 4306b4df42e0ce928189046f9bea65f85241dd63 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Thu, 30 Aug 2018 07:33:37 -0400
Subject: [PATCH 01/16] Adding COPYING file

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 COPYING | 339 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 339 insertions(+)
 create mode 100644 COPYING

diff --git a/COPYING b/COPYING
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/COPYING
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.

From 73d8449dd355055a7cdfe9cb646f7f59ea7b1a5c Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Thu, 30 Aug 2018 13:50:16 -0400
Subject: [PATCH 02/16] Add support for detecting installed libjitterentropy.so

Currently, rng-tools uses libjitterentropy built locally in this source
tree as a static library.  That is sub-optimal however, as jitterentropy
is an independently maintained project.  Ideally it would be nice to
instead load libjitterentropy as a DSO, which that project can build as.
This is the first of three steps toward moving in that direction:

1) Add support to check for and link against libjitterentropy.so, if
found on the host

2) Deprecate local building of jitterentropy as a static library

3) Remove support for building jitterentropy as a static library

This commit implements step 1.  If the configure script finds a local
copy of the jitterentropy source, it will build a static library from
it.  If not, then it will look for a local libjitterentropy.so.  If
found, it will link against that.  Otherwise, it will disable the
jitterentropy source

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 Makefile.am  |  9 +++++++++
 configure.ac | 14 ++++++++++++--
 2 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index fa8ecca..a7abd30 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -7,6 +7,10 @@ if JITTER
  AM_CPPFLAGS = -I./jitterentropy-library
 endif
 
+if JITTER_DSO
+ JSUBLIB= -ljitterentropy
+endif
+
 SUBDIRS		= contrib tests $(JSUBDIR) 
 
 sbin_PROGRAMS	 = rngd
@@ -33,6 +37,11 @@ if JITTER
 rngd_SOURCES	+= rngd_jitter.c
 endif
 
+if JITTER_DSO
+rngd_SOURCES	+= rngd_jitter.c
+endif
+
+
 rngd_LDADD	= librngd.a -lsysfs $(JSUBLIB) ${libcurl_LIBS} ${libxml2_LIBS} ${openssl_LIBS} $(PTHREAD_LIBS)
 
 rngd_CFLAGS	= ${libxml2_CFLAGS} ${openssl_CFLAGS} $(PTHREAD_CFLAGS)
diff --git a/configure.ac b/configure.ac
index 029d59f..9edf0e3 100644
--- a/configure.ac
+++ b/configure.ac
@@ -57,8 +57,18 @@ AS_IF([test $target_cpu = x86_64 -o $target_cpu = i686], [AC_DEFINE([HAVE_RDRAND
 AM_CONDITIONAL([DARN], [test $target_cpu = powerpc64le])
 AS_IF([test $target_cpu = powerpc64le], [AC_DEFINE([HAVE_DARN],1,[Enable DARN])],[])
 
-AM_CONDITIONAL([JITTER], [test -f jitterentropy-library/Makefile])
-AS_IF([test -f jitterentropy-library/Makefile], [AC_DEFINE([HAVE_JITTER],1,[Enable JITTER])],[AC_MSG_NOTICE([Disabling JITTER entropy source])])
+AM_CONDITIONAL([JITTER], [false])
+AM_CONDITIONAL([JITTER_DSO], [false])
+AS_IF([test -f jitterentropy-library/Makefile],
+		[AM_CONDITIONAL([JITTER], [true])
+		 AC_DEFINE([HAVE_JITTER],1,[Enable JITTER])],
+		[AC_SEARCH_LIBS(jent_version,jitterentropy,
+			[AM_CONDITIONAL([JITTER_DSO], [true])
+			 AC_DEFINE([HAVE_JITTER],1,[Enable JITTER])],
+			[AC_MSG_NOTICE([Disabling JITTER entropy source])])])
+
+#AM_CONDITIONAL([JITTER], [test -f jitterentropy-library/Makefile])
+#AS_IF([test -f jitterentropy-library/Makefile], [AC_DEFINE([HAVE_JITTER],1,[Enable JITTER])],[AC_MSG_NOTICE([Disabling JITTER entropy source])])
 
 AS_IF(
 	[ test "x$with_nistbeacon" != "xno"],

From 5579d26767cbfdf505a3dd4bdbf07d6d0ae95ae3 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Thu, 30 Aug 2018 16:04:06 -0400
Subject: [PATCH 03/16] rngd: Fix missing null terminator for rngd_jitter
 options

Didn't terminate the array with a NULL entry, which means we could run
off the end of the array

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/rngd.c b/rngd.c
index 8dc1417..94783ba 100644
--- a/rngd.c
+++ b/rngd.c
@@ -177,6 +177,9 @@ static struct rng_option jitter_options[] = {
 		.key = "refill_thresh",
 		.int_val = 16535,
 	},
+	{
+		.key = NULL,
+	}
 };
 
 static struct rng entropy_sources[ENT_MAX] = {

From 9b9f285d8538cd241bb7524454912705d8916081 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Fri, 31 Aug 2018 13:40:53 -0400
Subject: [PATCH 04/16] rngd_jitter: fix process termination on SIGINT and
 clean mutex locking

It was reported recently that rngd would not terminate properly when
running the jitter entropy source in daemon mode.  It apeared that the
daemon would not terminate on receipt of a signint.  It turns out that
it would eventually terminate, but it would take an extra long time,
because the jitterentropy library was sometimes taking a while to
compute entropy (detecting lots of stuck cycles for some reason).

Fix it by allowing the threads to generate entropy with the mutex
unlocked, and only lock it to update the shared buffer.

There still seems to be a periodic problem with jitterentropy taking
extra long to generate output, so I've added some debug code here as
well to detect when thats happening, in the hopes I can track that down.

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c        |  8 ++++++--
 rngd.h        |  1 +
 rngd_jitter.c | 56 ++++++++++++++++++++++++++++++++++++++++++---------
 3 files changed, 54 insertions(+), 11 deletions(-)

diff --git a/rngd.c b/rngd.c
index 94783ba..580f909 100644
--- a/rngd.c
+++ b/rngd.c
@@ -598,9 +598,13 @@ int main(int argc, char **argv)
 
 		signal(SIGHUP, SIG_IGN);
 		signal(SIGPIPE, SIG_IGN);
-		signal(SIGINT, term_signal);
-		signal(SIGTERM, term_signal);
 	}
+	/*
+	 * We always catch these to ensure that we gracefully shutdown
+	 */
+	signal(SIGINT, term_signal);
+	signal(SIGTERM, term_signal);
+
 	if (arguments->ignorefail)
 		ignorefail = true;
 
diff --git a/rngd.h b/rngd.h
index d762783..c07aeae 100644
--- a/rngd.h
+++ b/rngd.h
@@ -121,6 +121,7 @@ extern bool quiet;
 		if ((LOG_PRI(priority) != LOG_DEBUG) || (arguments->debug == true)) {\
 			fprintf(stderr, fmt, ##args); \
 			fprintf(stderr, "\n"); \
+			fflush(stdout); \
 		} \
 	} \
 } while (0)
diff --git a/rngd_jitter.c b/rngd_jitter.c
index 239a4b0..065fcf9 100644
--- a/rngd_jitter.c
+++ b/rngd_jitter.c
@@ -23,6 +23,7 @@
 #endif
 
 #include <pthread.h>
+#include <time.h>
 #include "rng-tools-config.h"
 
 #include <jitterentropy.h>
@@ -47,7 +48,6 @@ struct thread_data {
 	pthread_cond_t cond;
 };
 
-#define MAX_THREADS 4 
 static struct thread_data *tdata;
 static pthread_t *threads;
 
@@ -70,12 +70,11 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 		/* if the current thread is refilling its buffer
  		 * just move on to the next one
  		 */
-		if (pthread_mutex_trylock(&current->mtx)) {
-			message(LOG_DAEMON|LOG_DEBUG, "JITTER skips thread on cpu %d\n", current->core_id);
-			goto next;
-		}
+		pthread_mutex_lock(&current->mtx);
+
 		if (current->refill) {
-			message(LOG_DAEMON|LOG_DEBUG, "JITTER skips thread on cpu %d\n", current->core_id);
+			message(LOG_DAEMON|LOG_DEBUG, "JITTER skips empty thread on cpu %d\n", current->core_id);
+			sched_yield();
 			goto next_unlock;
 		}
 			
@@ -100,7 +99,6 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 		current = &tdata[data];
 		if (start == current)
 			goto out;
-		pthread_mutex_lock(&current->mtx);
 	}
 	rc = 0;
 
@@ -111,6 +109,20 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 
 }
 
+static inline double elapsed_time(struct timespec *start, struct timespec *end)
+{
+	double delta;
+
+	delta = (end->tv_sec - start->tv_sec);
+	if (start->tv_nsec >= end->tv_nsec)
+		delta = (delta * 1.0e9) + (start->tv_nsec - end->tv_nsec);
+	else
+		delta = ((delta + 1) * 1.0e9) + (end->tv_nsec - start->tv_nsec);	
+	delta = delta / 1.0e9; 
+
+	return delta;
+}
+
 static void *thread_entropy_task(void *data)
 {
 	cpu_set_t cpuset;
@@ -118,6 +130,8 @@ static void *thread_entropy_task(void *data)
 	ssize_t ret;
 	size_t need;
 	struct thread_data *me = data;
+	char *tmpbuf;
+	struct timespec start, end;
 
 	/* STARTUP */
 	/* fill initial entropy */
@@ -125,12 +139,24 @@ static void *thread_entropy_task(void *data)
 	CPU_SET(me->core_id, &cpuset);
 	pthread_setaffinity_np(pthread_self(), CPU_ALLOC_SIZE(me->core_id+1), &cpuset);
 
+	tmpbuf = malloc(me->buf_sz);
+	if (!tmpbuf) {
+		message(LOG_DAEMON|LOG_DEBUG, "Unable to allocte temp buffer on cpu %d\n", me->core_id);
+		goto out;
+	}
+
 	pthread_mutex_lock(&me->mtx);
-	ret = jent_read_entropy(me->ec, me->buf_ptr, me->buf_sz);
+	clock_gettime(CLOCK_REALTIME, &start);
+	ret = jent_read_entropy(me->ec, tmpbuf, me->buf_sz);
+	clock_gettime(CLOCK_REALTIME, &end);
+	message(LOG_DEBUG|LOG_ERR, "jent_read_entropy time on cpu %d is %.12e sec\n",
+		me->core_id, elapsed_time(&start, &end));
+
 	if (ret < 0)
 		message(LOG_DAEMON|LOG_DEBUG, "JITTER THREAD FAILS TO GATHER ENTROPY\n");
 
 	else {
+		memcpy(me->buf_ptr, tmpbuf, me->buf_sz);
 		me->avail = me->buf_sz;
 		me->refill = 0;
 	}
@@ -147,16 +173,27 @@ static void *thread_entropy_task(void *data)
 
 		/* We are awake because we need to refil the buffer */
 		need = me->buf_sz - me->avail;
-		ret = jent_read_entropy(me->ec, me->buf_ptr, need);	
+		pthread_mutex_unlock(&me->mtx);
+		clock_gettime(CLOCK_REALTIME, &start);
+		ret = jent_read_entropy(me->ec, tmpbuf, need);	
+		clock_gettime(CLOCK_REALTIME, &end);
+		message(LOG_DEBUG|LOG_ERR, "jent_read_entropy time on cpu %d is %.12e sec\n",
+			me->core_id, elapsed_time(&start, &end));
 		if (ret == 0)
 			message(LOG_DAEMON|LOG_DEBUG, "JITTER THREAD_FAILS TO GATHER ENTROPY\n");
+		pthread_mutex_lock(&me->mtx);
+		if (!me->buf_ptr) /* buf_ptr may have been removed while gathering entropy */
+			break;
+		memcpy(me->buf_ptr, tmpbuf, me->buf_sz);
 		me->idx = 0;
 		me->avail = me->buf_sz;
 		me->refill = 0;
 
 	} while (me->buf_ptr);
 
+	free(tmpbuf);
 	pthread_mutex_unlock(&me->mtx);
+out:
 	pthread_exit(NULL);
 }
 
@@ -249,6 +286,7 @@ int init_jitter_entropy_source(struct rng *ent_src)
 			sched_yield();
 			pthread_mutex_lock(&tdata[i].mtx);
 		}
+		message(LOG_DAEMON|LOG_DEBUG, "CPU Thread %d is ready\n", i);
 		pthread_mutex_unlock(&tdata[i].mtx);
 	}
 		

From 8fbbed0b748dbd7e19f01b92a4f9f3afd43e120b Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Fri, 31 Aug 2018 15:41:22 -0400
Subject: [PATCH 05/16] Add retry count and retry delay options to jitter
 entropy

jitterentropy can take several seconds to generate entropy (1-2 by my
measurements on my systems, but it could be much longer).  Rngd typicaly
doesn't block waiting for an entropy source, it just marks a lack of
entropy as a failure and moves on. If jitterentropy is your only
entropy source though, too many failures can lead to rngd disabling the
source and potentially shutting down.  When rngd needs entropy, it will
spin quickly, and the errors mount fast.  To avoid that we introduce
these parameters in which, when all jitterentropy buffers are empty,
retry a configurable number of times, sleep a configureable number of
seconds between each retry.  This should allow the buffers to refill.

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.8.in     |  3 +++
 rngd.c        |  8 ++++++++
 rngd.h        |  3 +++
 rngd_jitter.c | 20 ++++++++++++++++----
 4 files changed, 30 insertions(+), 4 deletions(-)

diff --git a/rngd.8.in b/rngd.8.in
index fd200c4..dd77e84 100644
--- a/rngd.8.in
+++ b/rngd.8.in
@@ -166,6 +166,9 @@ Options
 
 \fBrefill_thresh - \fR Set the low watermark for the cache that triggers its corresponding thread to start refill operations 
 
+\fBretry_count - \fR If all entropy buffers are empty, retry this many times before giving up.  Note that jitterentropy can take several seconds to refill a buffer, and so retries after a delay may be preferable to repeatedly spining on an empty buffer (default 1)
+
+\fBretry_delay - \fR between each retry for retry_count above, sleep for this many seconds (default 1)
 
 .SH AUTHORS
 Philipp Rumpf
diff --git a/rngd.c b/rngd.c
index 580f909..83eea86 100644
--- a/rngd.c
+++ b/rngd.c
@@ -177,6 +177,14 @@ static struct rng_option jitter_options[] = {
 		.key = "refill_thresh",
 		.int_val = 16535,
 	},
+	[JITTER_OPT_RETRY_COUNT] = {
+		.key = "retry_count",
+		.int_val = 1,
+	},
+	[JITTER_OPT_RETRY_DELAY] = {
+		.key = "retry_delay",
+		.int_val = 1,
+	},
 	{
 		.key = NULL,
 	}
diff --git a/rngd.h b/rngd.h
index c07aeae..1e70719 100644
--- a/rngd.h
+++ b/rngd.h
@@ -80,6 +80,9 @@ enum {
 	JITTER_OPT_THREADS = 0,
 	JITTER_OPT_BUF_SZ = 1,
 	JITTER_OPT_REFILL = 2,
+	JITTER_OPT_RETRY_COUNT = 3,
+	JITTER_OPT_RETRY_DELAY = 4,
+	JITTER_OPT_MAX,
 };
 
 struct rng_option { 
diff --git a/rngd_jitter.c b/rngd_jitter.c
index 065fcf9..36e4fa2 100644
--- a/rngd_jitter.c
+++ b/rngd_jitter.c
@@ -65,7 +65,7 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 	size_t need = size;
 	char *bptr = buf;
 	int rc = 1;
-
+try_again:
 	while (need) {
 		/* if the current thread is refilling its buffer
  		 * just move on to the next one
@@ -74,7 +74,6 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 
 		if (current->refill) {
 			message(LOG_DAEMON|LOG_DEBUG, "JITTER skips empty thread on cpu %d\n", current->core_id);
-			sched_yield();
 			goto next_unlock;
 		}
 			
@@ -97,8 +96,14 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 		/* Move to the next thread */
 		data = ((data+1) % num_threads);	
 		current = &tdata[data];
-		if (start == current)
+		if (start == current) {
+			if (ent_src->rng_options[JITTER_OPT_RETRY_COUNT].int_val) {
+				if (ent_src->rng_options[JITTER_OPT_RETRY_DELAY].int_val)
+					sleep(ent_src->rng_options[JITTER_OPT_RETRY_DELAY].int_val);
+				goto try_again;
+			}
 			goto out;
+		}
 	}
 	rc = 0;
 
@@ -202,7 +207,8 @@ int validate_jitter_options(struct rng *ent_src)
 	int threads = ent_src->rng_options[JITTER_OPT_THREADS].int_val;
 	int buf_sz = ent_src->rng_options[JITTER_OPT_BUF_SZ].int_val;
 	int refill = ent_src->rng_options[JITTER_OPT_REFILL].int_val;
-
+	int delay = ent_src->rng_options[JITTER_OPT_RETRY_DELAY].int_val;
+	int rcount = ent_src->rng_options[JITTER_OPT_RETRY_COUNT].int_val;
 
 	/* Need at least one thread to do this work */
 	if (!threads) {
@@ -215,6 +221,12 @@ int validate_jitter_options(struct rng *ent_src)
 		message(LOG_DAEMON|LOG_DEBUG, "JITTER buffer size must be larger than refill threshold\n");
 		return 1;
 	}
+
+	if ((rcount < 0) || (delay < 0)) {
+		message(LOG_DAEMON|LOG_DEBUG, "JITTER retry delay and count must be equal to or greater than 0\n");
+		return 1;
+	}
+
 	return 0;
 }
 

From 0858d7a680bab82242139dbb4c1c8046939243ec Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Fri, 31 Aug 2018 15:49:56 -0400
Subject: [PATCH 06/16] Fix segfault with bad options

stupid use of the wrong variable led to a null ptr deref when printing
out an error message during option parsing

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/rngd.c b/rngd.c
index 83eea86..aaa2251 100644
--- a/rngd.c
+++ b/rngd.c
@@ -321,7 +321,7 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 			}
 			options++;
 		}
-		message(LOG_CONS|LOG_INFO, "Option %s not found for source idx %d\n", key, idx);
+		message(LOG_CONS|LOG_INFO, "Option %s not found for source idx %d\n", optkey, idx);
 		return -ERANGE;
 		break;
 

From 2f7c27c311411901a8eb7f85f7e89d723e2a4504 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Sat, 1 Sep 2018 08:16:02 -0400
Subject: [PATCH 07/16] Add adaptive retry backoff to jitter entropy source

because the jitter source can take alot of time to generate entropy in
some cases, before rngd decides its just a non-functioning source,
instead provide a mechanism by which we can retry at an appropriate
time.  When rngd goes to read this source, if all entropy buffers are
empty, we can retry <retry_count> times before failing, sleeping between
each attempt <retry_delay> seconds.  both <retry_count> and
<retry_delay> are configurable via -O flag, with <retry_count> also
accepting the special value -1, meaning adaptive sleep, where jitter
will sleep for 1/2 the time it took for the most recent entropy
gathering round.

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.8.in     |  2 +-
 rngd.c        |  2 +-
 rngd_jitter.c | 65 +++++++++++++++++++++++++++++++++++++++++++++------
 3 files changed, 60 insertions(+), 9 deletions(-)

diff --git a/rngd.8.in b/rngd.8.in
index dd77e84..4df8e6c 100644
--- a/rngd.8.in
+++ b/rngd.8.in
@@ -168,7 +168,7 @@ Options
 
 \fBretry_count - \fR If all entropy buffers are empty, retry this many times before giving up.  Note that jitterentropy can take several seconds to refill a buffer, and so retries after a delay may be preferable to repeatedly spining on an empty buffer (default 1)
 
-\fBretry_delay - \fR between each retry for retry_count above, sleep for this many seconds (default 1)
+\fBretry_delay - \fR between each retry for retry_count above, sleep for this many seconds. May also be the special value -1, representing adaptive sleep, where each retry delay will be half the recorded execution time of the last entropy gathering round (default -1)
 
 .SH AUTHORS
 Philipp Rumpf
diff --git a/rngd.c b/rngd.c
index aaa2251..6ed6484 100644
--- a/rngd.c
+++ b/rngd.c
@@ -183,7 +183,7 @@ static struct rng_option jitter_options[] = {
 	},
 	[JITTER_OPT_RETRY_DELAY] = {
 		.key = "retry_delay",
-		.int_val = 1,
+		.int_val = -1,
 	},
 	{
 		.key = NULL,
diff --git a/rngd_jitter.c b/rngd_jitter.c
index 36e4fa2..1ea6aea 100644
--- a/rngd_jitter.c
+++ b/rngd_jitter.c
@@ -44,6 +44,8 @@ struct thread_data {
 	size_t avail;
 	size_t idx;
 	int refill;
+	int slpmode;
+	struct timespec slptm;
 	pthread_mutex_t mtx;
 	pthread_cond_t cond;
 };
@@ -65,6 +67,8 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 	size_t need = size;
 	char *bptr = buf;
 	int rc = 1;
+	int retry_count = 0;
+	struct timespec sleep;
 try_again:
 	while (need) {
 		/* if the current thread is refilling its buffer
@@ -74,6 +78,8 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 
 		if (current->refill) {
 			message(LOG_DAEMON|LOG_DEBUG, "JITTER skips empty thread on cpu %d\n", current->core_id);
+			/* Grab the sleep timer while we hold the lock */
+			memcpy(&sleep, &current->slptm, sizeof(struct timespec));
 			goto next_unlock;
 		}
 			
@@ -97,9 +103,9 @@ int xread_jitter(void *buf, size_t size, struct rng *ent_src)
 		data = ((data+1) % num_threads);	
 		current = &tdata[data];
 		if (start == current) {
-			if (ent_src->rng_options[JITTER_OPT_RETRY_COUNT].int_val) {
-				if (ent_src->rng_options[JITTER_OPT_RETRY_DELAY].int_val)
-					sleep(ent_src->rng_options[JITTER_OPT_RETRY_DELAY].int_val);
+			if (retry_count < ent_src->rng_options[JITTER_OPT_RETRY_COUNT].int_val) {
+				retry_count++;
+				nanosleep(&sleep, NULL);
 				goto try_again;
 			}
 			goto out;
@@ -128,6 +134,29 @@ static inline double elapsed_time(struct timespec *start, struct timespec *end)
 	return delta;
 }
 
+static inline void update_sleep_time(struct thread_data *me,
+				     struct timespec *start,
+				     struct timespec *end)
+{
+
+	/*
+	 * if slpmode is anything other than -1
+	 * it will be a positive integer representing
+	 * the fixed time to sleep on retry
+	 * so if its not negative one, we just stick
+	 * with whatever the init routine set up
+	 */
+	if (me->slpmode != -1)
+		return;
+
+	me->slptm.tv_sec = (end->tv_sec - start->tv_sec)/2;
+	if (start->tv_nsec >= end->tv_nsec)
+		me->slptm.tv_nsec = start->tv_nsec - end->tv_nsec;
+	else
+		me->slptm.tv_nsec = end->tv_nsec - start->tv_nsec;
+	me->slptm.tv_nsec /= 2;
+}
+
 static void *thread_entropy_task(void *data)
 {
 	cpu_set_t cpuset;
@@ -139,6 +168,18 @@ static void *thread_entropy_task(void *data)
 	struct timespec start, end;
 
 	/* STARTUP */
+
+	/*
+	 * Set our timeout value
+	 * -1 means adaptive, i.e. sleep for the last 
+	 * recorded execution time of a jitter read
+	 * otherwise sleep for slpmode seconds
+	 */
+	if (me->slpmode != -1) {
+		me->slptm.tv_sec = me->slpmode;
+		me->slptm.tv_nsec = 0;
+	}
+
 	/* fill initial entropy */
 	CPU_ZERO(&cpuset);
 	CPU_SET(me->core_id, &cpuset);
@@ -154,6 +195,8 @@ static void *thread_entropy_task(void *data)
 	clock_gettime(CLOCK_REALTIME, &start);
 	ret = jent_read_entropy(me->ec, tmpbuf, me->buf_sz);
 	clock_gettime(CLOCK_REALTIME, &end);
+	update_sleep_time(me, &start, &end);
+
 	message(LOG_DEBUG|LOG_ERR, "jent_read_entropy time on cpu %d is %.12e sec\n",
 		me->core_id, elapsed_time(&start, &end));
 
@@ -187,6 +230,8 @@ static void *thread_entropy_task(void *data)
 		if (ret == 0)
 			message(LOG_DAEMON|LOG_DEBUG, "JITTER THREAD_FAILS TO GATHER ENTROPY\n");
 		pthread_mutex_lock(&me->mtx);
+		/* Need to hold the mutex to update the sleep time */
+		update_sleep_time(me, &start, &end);
 		if (!me->buf_ptr) /* buf_ptr may have been removed while gathering entropy */
 			break;
 		memcpy(me->buf_ptr, tmpbuf, me->buf_sz);
@@ -212,18 +257,23 @@ int validate_jitter_options(struct rng *ent_src)
 
 	/* Need at least one thread to do this work */
 	if (!threads) {
-		message(LOG_DAEMON|LOG_DEBUG, "JITTER Requires a minimum of 1 thread, setting threads to 1\n");
+		message(LOG_DAEMON|LOG_ERR, "JITTER Requires a minimum of 1 thread, setting threads to 1\n");
 		ent_src->rng_options[JITTER_OPT_THREADS].int_val = 1;
 	}
 
 	/* buf_sz should be the same size or larger than the refill threshold */
 	if (buf_sz < refill) {
-		message(LOG_DAEMON|LOG_DEBUG, "JITTER buffer size must be larger than refill threshold\n");
+		message(LOG_DAEMON|LOG_ERR, "JITTER buffer size must be larger than refill threshold\n");
+		return 1;
+	}
+
+	if (rcount < 0) {
+		message(LOG_DAEMON|LOG_ERR, "JITTER retry delay and count must be equal to or greater than 0\n");
 		return 1;
 	}
 
-	if ((rcount < 0) || (delay < 0)) {
-		message(LOG_DAEMON|LOG_DEBUG, "JITTER retry delay and count must be equal to or greater than 0\n");
+	if ((delay < -1) || (delay == 0)) {
+		message(LOG_DAEMON|LOG_ERR, "JITTER retry delay must be -1 or larger than 0\n");
 		return 1;
 	}
 
@@ -282,6 +332,7 @@ int init_jitter_entropy_source(struct rng *ent_src)
 		tdata[i].buf_ptr = calloc(1, tdata[i].buf_sz);
 		tdata[i].ec = jent_entropy_collector_alloc(1, 0);
 		tdata[i].refill = 1;
+		tdata[i].slpmode = ent_src->rng_options[JITTER_OPT_RETRY_DELAY].int_val;
 		pthread_mutex_init(&tdata[i].mtx, NULL);
 		pthread_cond_init(&tdata[i].cond, NULL);
 		pthread_create(&threads[i], NULL, thread_entropy_task, &tdata[i]);

From b772ac9d368eeed2bac1e3611098ffbe1a4a30e7 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Sat, 1 Sep 2018 11:41:55 -0400
Subject: [PATCH 08/16] initalize pid_fd

pid_fd wasn't initalized properly, so we might unlink a non-existant
file when running in daemon mode

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/rngd.c b/rngd.c
index 6ed6484..038dfd2 100644
--- a/rngd.c
+++ b/rngd.c
@@ -521,7 +521,7 @@ int main(int argc, char **argv)
 {
 	int i;
 	int ent_sources = 0;
-	pid_t pid_fd;
+	pid_t pid_fd = -1;
 
 	openlog("rngd", 0, LOG_DAEMON);
 

From 5fca1d806b18be473f04de92b5313432afe608f7 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Sun, 2 Sep 2018 07:47:28 -0400
Subject: [PATCH 09/16] remove old uses of arguments->quiet

Not needed anymore, since quiet squashing was moved into message macro

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c       | 32 ++++++++++++--------------------
 rngd.h       |  1 -
 rngd_linux.c |  7 +++----
 3 files changed, 15 insertions(+), 25 deletions(-)

diff --git a/rngd.c b/rngd.c
index 038dfd2..2d3bacc 100644
--- a/rngd.c
+++ b/rngd.c
@@ -128,7 +128,6 @@ static struct arguments default_arguments = {
 	.daemon		= true,
 	.list		= false,
 	.ignorefail	= false,
-	.quiet		= false,
 	.entropy_count	= 8,
 };
 struct arguments *arguments = &default_arguments;
@@ -374,7 +373,6 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 		break;
 	}
 	case 'q':
-		arguments->quiet = true;
 		quiet = true;
 		break;
 	case 'v':
@@ -469,9 +467,8 @@ static void do_loop(int random_step)
 			}
 
 			if (iter->failures >= MAX_RNG_FAILURES && !ignorefail) {
-				if (!arguments->quiet)
-					message(LOG_DAEMON|LOG_ERR,
-					"too many FIPS failures, disabling entropy source\n");
+				message(LOG_DAEMON|LOG_ERR,
+				"too many FIPS failures, disabling entropy source\n");
 				if (iter->close)
 					iter->close(iter);
 				iter->disabled = true;
@@ -479,9 +476,8 @@ static void do_loop(int random_step)
 		}
 	}
 
-	if (!arguments->quiet)
-		message(LOG_DAEMON|LOG_ERR,
-		"No entropy sources working, exiting rngd\n");
+	message(LOG_DAEMON|LOG_ERR,
+	"No entropy sources working, exiting rngd\n");
 }
 
 static void term_signal(int signo)
@@ -555,9 +551,8 @@ int main(int argc, char **argv)
 				entropy_sources[i].fipsctx = malloc(sizeof(fips_ctx_t));
 				fips_init(entropy_sources[i].fipsctx, discard_initial_data(&entropy_sources[i]));
 			} else {
-				if (!arguments->quiet)
-					message(LOG_ERR | LOG_DAEMON, "Failed to init entropy source %d: %s\n",
-						i, entropy_sources[i].rng_name);
+				message(LOG_ERR | LOG_DAEMON, "Failed to init entropy source %d: %s\n",
+					i, entropy_sources[i].rng_name);
 				entropy_sources[i].disabled = true;
 			}
 		}
@@ -578,12 +573,10 @@ int main(int argc, char **argv)
 	}
 
 	if (!ent_sources) {
-		if (!arguments->quiet) {
-			message(LOG_DAEMON|LOG_ERR,
-				"can't open any entropy source");
-			message(LOG_DAEMON|LOG_ERR,
-				"Maybe RNG device modules are not loaded\n");
-		}
+		message(LOG_DAEMON|LOG_ERR,
+			"can't open any entropy source");
+		message(LOG_DAEMON|LOG_ERR,
+			"Maybe RNG device modules are not loaded\n");
 		return 1;
 	}
 	/* Init entropy sink and open random device */
@@ -593,9 +586,8 @@ int main(int argc, char **argv)
 		am_daemon = true;
 
 		if (daemon(0, 0) < 0) {
-			if(!arguments->quiet)
-				message(LOG_CONS|LOG_INFO, "can't daemonize: %s\n",
-				strerror(errno));
+			message(LOG_CONS|LOG_INFO, "can't daemonize: %s\n",
+			strerror(errno));
 			return 1;
 		}
 
diff --git a/rngd.h b/rngd.h
index 1e70719..7490c6b 100644
--- a/rngd.h
+++ b/rngd.h
@@ -47,7 +47,6 @@ struct arguments {
 	int fill_watermark;
 
 	bool debug;
-	bool quiet;
 	bool daemon;
 	bool list;
 	bool ignorefail;
diff --git a/rngd_linux.c b/rngd_linux.c
index 1861f3c..f938a38 100644
--- a/rngd_linux.c
+++ b/rngd_linux.c
@@ -110,10 +110,9 @@ void init_kernel_rng(const char* randomdev)
 		err = ferror(f) | fclose(f);
 	}
 	if (err) {
-		if (!arguments->quiet)
-			message(LOG_DAEMON|LOG_WARNING,
-				"unable to adjust write_wakeup_threshold: %s",
-				strerror(errno));
+		message(LOG_DAEMON|LOG_WARNING,
+			"unable to adjust write_wakeup_threshold: %s",
+			strerror(errno));
 	}
 }
 

From efcf79dbc4213bc7b3522796ad92f4e36c907dfe Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Mon, 3 Sep 2018 10:49:13 -0400
Subject: [PATCH 11/16] Add flags field to mark entropy sources as slow

Some entropy sources (jitter and nistbeacon) product entropy
consistently, but can have wide range in their rates, and speed.  As
such, rngd may falsely accuse these entropy sources of being broken and
disable them.  Mark these sources a slow, so that rngd ignores them and
keeps trying at whatever rate they are able to produce entropy.

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c | 40 ++++++++++++++++++++++++++++++++++++++--
 rngd.h |  5 ++++-
 2 files changed, 42 insertions(+), 3 deletions(-)

diff --git a/rngd.c b/rngd.c
index 2d3bacc..b12b497 100644
--- a/rngd.c
+++ b/rngd.c
@@ -195,6 +195,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 		.rng_name	= "Hardware RNG Device",
 		.rng_fname      = "/dev/hwrng",
 		.rng_fd         = -1,
+		.flags		= { 0 }, 
 		.xread          = xread,
 		.init           = init_entropy_source,
 		.rng_options	= NULL,
@@ -204,6 +205,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 		.rng_name	= "TPM RNG Device",
 		.rng_fname      = "/dev/tpm0",
 		.rng_fd         = -1,
+		.flags		= { 0 }, 
 		.xread          = xread_tpm,
 		.init           = init_tpm_entropy_source,
 		.rng_options	= NULL,
@@ -211,6 +213,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	{
 		.rng_name       = "Intel RDRAND Instruction RNG",
 		.rng_fd         = -1,
+		.flags		= { 0 }, 
 #ifdef HAVE_RDRAND
 		.xread          = xread_drng,
 		.init           = init_drng_entropy_source,
@@ -222,6 +225,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	{
 		.rng_name       = "Power9 DARN Instruction RNG",
 		.rng_fd         = -1,
+		.flags		= { 0 },
 #ifdef HAVE_DARN
 		.xread          = xread_darn,
 		.init           = init_darn_entropy_source,
@@ -233,6 +237,9 @@ static struct rng entropy_sources[ENT_MAX] = {
 	{
 		.rng_name	= "NIST Network Entropy Beacon",
 		.rng_fd		= -1,
+		.flags		= {
+			.slow_source = 1,
+		}, 
 #ifdef HAVE_NISTBEACON
 		.xread		= xread_nist,
 		.init		= init_nist_entropy_source,
@@ -243,6 +250,9 @@ static struct rng entropy_sources[ENT_MAX] = {
 	{
 		.rng_name	= "JITTER Entropy generator",
 		.rng_fd		= -1,
+		.flags		= {
+			.slow_source = 1,
+		},
 #ifdef HAVE_JITTER
 		.xread		= xread_jitter,
 		.init		= init_jitter_entropy_source,
@@ -421,10 +431,13 @@ static void do_loop(int random_step)
 	unsigned char buf[FIPS_RNG_BUFFER_SIZE];
 	int no_work;
 	bool work_done;
+	int sources_left;
+	int i;
+	int retval;
+	struct rng *iter;
 
+continue_trying:
 	for (no_work = 0; no_work < 100; no_work = (work_done ? 0 : no_work+1)) {
-		struct rng *iter;
-		int i, retval;
 
 		work_done = false;
 		for (i = 0; i < ENT_MAX; ++i)
@@ -476,6 +489,29 @@ static void do_loop(int random_step)
 		}
 	}
 
+	/*
+	 * No entropy source produced entropy in 
+	 * 100 rounds, disable anything that isn't
+	 * flagged as a slow source
+	 */
+	sources_left = 0;
+	for (i = 0; i < ENT_MAX; ++i) {
+		iter = &entropy_sources[i];
+		if (!iter->flags.slow_source && !iter->disabled) {
+			message(LOG_DAEMON|LOG_WARNING, "Too Slow: Disabling %s\n",
+				iter->rng_name);
+			iter->disabled = 1;
+		}
+		if (!iter->disabled)
+			sources_left++;
+	}
+
+	if (sources_left) {
+		message(LOG_DAEMON|LOG_WARNING,
+			"Entropy Generation is slow, consider tuning/adding sources\n");
+		goto continue_trying;
+	}
+
 	message(LOG_DAEMON|LOG_ERR,
 	"No entropy sources working, exiting rngd\n");
 }
diff --git a/rngd.h b/rngd.h
index 7490c6b..eeea9f9 100644
--- a/rngd.h
+++ b/rngd.h
@@ -97,7 +97,10 @@ struct rng {
 	bool disabled;
 	int failures;
 	int success;
-
+	struct flags {
+		/* Slow sources - takes a long time to produce entropy */
+		unsigned int slow_source : 1;
+	} flags;
 	int (*xread) (void *buf, size_t size, struct rng *ent_src);
 	int (*init) (struct rng *ent_src);
 	void (*close) (struct rng *end_src);

From e4d347e299d4589ee82d7cde52d47af734969ec1 Mon Sep 17 00:00:00 2001
From: Lonnie Abelbeck <lonnie@abelbeck.com>
Date: Thu, 6 Sep 2018 08:59:57 -0500
Subject: [PATCH 12/16] Add cross-compile fixes Check for 'ar' as it is used
 for standard builds as well as jitterentropy Export select variables when
 building the jitterentropy library

---
 Makefile.am  | 1 +
 configure.ac | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/Makefile.am b/Makefile.am
index a7abd30..67801bf 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -5,6 +5,7 @@ if JITTER
  JSUBDIR = jitterentropy-library
  JSUBLIB = ./jitterentropy-library/libjitterentropy.a
  AM_CPPFLAGS = -I./jitterentropy-library
+ export CC AR CFLAGS LDFLAGS
 endif
 
 if JITTER_DSO
diff --git a/configure.ac b/configure.ac
index 9edf0e3..faba7cc 100644
--- a/configure.ac
+++ b/configure.ac
@@ -49,6 +49,8 @@ AC_PROG_CC
 AC_PROG_RANLIB
 AC_PROG_GCC_TRADITIONAL
 
+AC_CHECK_TOOLS([AR], [ar gar], :)
+
 AX_PTHREAD
 
 AM_CONDITIONAL([RDRAND], [test $target_cpu = x86_64 -o $target_cpu = i686])

From d781c59a209e37c3371cd5fd4ab12a2ff6e5f0b2 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Wed, 12 Sep 2018 11:12:46 -0400
Subject: [PATCH 13/16] rngd: Add a short name to each entropy source

In an effort to get away from referring to entropy sources by fixed
index, instead, create a short name for each that we can do easy lookups
on

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c | 6 ++++++
 rngd.h | 1 +
 2 files changed, 7 insertions(+)

diff --git a/rngd.c b/rngd.c
index b12b497..be4c60a 100644
--- a/rngd.c
+++ b/rngd.c
@@ -193,6 +193,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	/* Note, the special char dev must be the first entry */
 	{
 		.rng_name	= "Hardware RNG Device",
+		.rng_sname	= "hwrng",
 		.rng_fname      = "/dev/hwrng",
 		.rng_fd         = -1,
 		.flags		= { 0 }, 
@@ -203,6 +204,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	/* must be at index 1 */
 	{
 		.rng_name	= "TPM RNG Device",
+		.rng_sname	= "tpm",
 		.rng_fname      = "/dev/tpm0",
 		.rng_fd         = -1,
 		.flags		= { 0 }, 
@@ -212,6 +214,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	},
 	{
 		.rng_name       = "Intel RDRAND Instruction RNG",
+		.rng_sname	= "rdrand",
 		.rng_fd         = -1,
 		.flags		= { 0 }, 
 #ifdef HAVE_RDRAND
@@ -224,6 +227,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	},
 	{
 		.rng_name       = "Power9 DARN Instruction RNG",
+		.rng_sname	= "darn",
 		.rng_fd         = -1,
 		.flags		= { 0 },
 #ifdef HAVE_DARN
@@ -236,6 +240,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	},
 	{
 		.rng_name	= "NIST Network Entropy Beacon",
+		.rng_sname	= "nist",
 		.rng_fd		= -1,
 		.flags		= {
 			.slow_source = 1,
@@ -249,6 +254,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 	},
 	{
 		.rng_name	= "JITTER Entropy generator",
+		.rng_sname	= "jitter",
 		.rng_fd		= -1,
 		.flags		= {
 			.slow_source = 1,
diff --git a/rngd.h b/rngd.h
index eeea9f9..e37d760 100644
--- a/rngd.h
+++ b/rngd.h
@@ -92,6 +92,7 @@ struct rng_option {
 /* structures to store rng information */
 struct rng {
 	char *rng_name;
+	char *rng_sname;
 	char *rng_fname;
 	int rng_fd;
 	bool disabled;

From eadd52d92d0d42fd4e244764567279106ee7ad4c Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Wed, 12 Sep 2018 11:55:22 -0400
Subject: [PATCH 14/16] rngd: Add support for detecting short names

allow the -x, -n and -O options to reference entropy sources by short
name rather than index.  Eventually we will deprecate the index
entirely, which will allow us to remove entropy sources as needed

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c | 100 +++++++++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 83 insertions(+), 17 deletions(-)

diff --git a/rngd.c b/rngd.c
index be4c60a..1fbd94e 100644
--- a/rngd.c
+++ b/rngd.c
@@ -47,6 +47,7 @@
 #include <syslog.h>
 #include <signal.h>
 #include <limits.h>
+#include <ctype.h>
 
 #include "rngd.h"
 #include "fips.h"
@@ -270,6 +271,18 @@ static struct rng entropy_sources[ENT_MAX] = {
 	},
 };
 
+static int find_ent_src_idx_by_sname(const char *sname)
+{
+	int i;
+
+	for (i = 0; i < ENT_MAX; i++) {
+		if (!strncmp(sname, entropy_sources[i].rng_sname,
+			strlen(entropy_sources[i].rng_sname)))
+			return i;
+	}
+
+	return -1;
+}
 
 /*
  * command line processing
@@ -279,6 +292,7 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 	char *optkey;
 	long int idx;
 	long int val;
+	bool restore = false;
 	char *search, *last_search;
 	struct rng_option *options;
 
@@ -293,14 +307,35 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 
 		search = strchrnul(arg, ':');
 
-		idx = strtoul(arg, &search, 10);
-		if ((idx == LONG_MAX) || (idx >= ENT_MAX)) {
-			message(LOG_CONS|LOG_INFO, "option index out of range: %lu\n", idx);
-			return -ERANGE;
+		if (isalpha(arg[0])) {
+			/*
+			 * first argument might be a string, lookup by short
+			 * name
+			 */
+			if (*search != '\0') {
+				*search = '\0';
+				restore = true;
+			}
+			idx = find_ent_src_idx_by_sname(arg);
+			if (idx == -1) {
+				message(LOG_CONS|LOG_WARNING, "Unknown entropy source %s\n", arg);
+				return -EINVAL;
+			}
+			if (restore == true)
+				*search = ':';
+		} else {
+			idx = strtoul(arg, &search, 10);
+			if ((idx == LONG_MAX) || (idx >= ENT_MAX)) {
+				message(LOG_CONS|LOG_INFO, "option index out of range: %lu\n", idx);
+				return -ERANGE;
+			}
+			message(LOG_CONS|LOG_INFO, "Note, reference of entropy sources by index "
+				"is deprecated, use entropy source short name instead\n");
 		}
 
 		if (*search == '\0') {
-			message(LOG_CONS|LOG_INFO, "Available options for %s\n", entropy_sources[idx].rng_name);
+			message(LOG_CONS|LOG_INFO, "Available options for %s (%s)\n",
+				entropy_sources[idx].rng_name, entropy_sources[idx].rng_sname);
 			options = entropy_sources[idx].rng_options;
 			while (options && options->key) {
 				message(LOG_CONS|LOG_INFO, "key: [%s]\tdefault value: [%d]\n", options->key, options->int_val);
@@ -341,22 +376,51 @@ static error_t parse_opt (int key, char *arg, struct argp_state *state)
 		break;
 
 	case 'x':
-		idx = strtol(arg, NULL, 10);
-		if ((idx == LONG_MAX) || (idx >= ENT_MAX)) {
-			message(LOG_CONS|LOG_INFO, "exclude index is out of range: %lu\n", idx);
-			return -ERANGE;
+		if (isalpha(arg[0])) {
+			/*
+			 * first argument might be a string, lookup by short
+			 * name
+			 */
+			idx = find_ent_src_idx_by_sname(arg);
+			if (idx == -1) {
+				message(LOG_CONS|LOG_WARNING, "Unknown entropy source %s\n", arg);
+				return -EINVAL;
+			}
+		} else {
+			idx = strtol(arg, NULL, 10);
+			if ((idx == LONG_MAX) || (idx >= ENT_MAX)) {
+				message(LOG_CONS|LOG_INFO, "option index out of range: %lu\n", idx);
+				return -ERANGE;
+			}
+			message(LOG_CONS|LOG_INFO, "Note, reference of entropy sources by index "
+				"is deprecated, use entropy source short name instead\n");
 		}
+
 		entropy_sources[idx].disabled = true;
-		message(LOG_CONS|LOG_INFO, "Disabling %lu: %s\n", idx, entropy_sources[idx].rng_name);
+		message(LOG_CONS|LOG_INFO, "Disabling %lu: %s (%s)\n", idx,
+			entropy_sources[idx].rng_name, entropy_sources[idx].rng_sname);
 		break;
 	case 'n':
-		idx = strtol(arg, NULL, 10);
-		if ((idx == LONG_MAX) || (idx >= ENT_MAX)) {
-			message(LOG_CONS|LOG_INFO, "enable index is out of range: %lu\n", idx);
-			return -ERANGE;
+		if (isalpha(arg[0])) {
+			idx = find_ent_src_idx_by_sname(arg);
+			if (idx == -1) {
+				message(LOG_CONS|LOG_WARNING, "Unknown entropy source %s\n", arg);
+				return -EINVAL;
+			}
+		} else {
+			idx = strtol(arg, NULL, 10);
+			if ((idx == LONG_MAX) || (idx >= ENT_MAX)) {
+				message(LOG_CONS|LOG_INFO, "option index out of range: %lu\n", idx);
+				return -ERANGE;
+			}
+
+			message(LOG_CONS|LOG_INFO, "Note, reference of entropy sources by index "
+                                "is deprecated, use entropy source short name instead\n");
 		}
+
 		entropy_sources[idx].disabled = false;
-		message(LOG_CONS|LOG_INFO, "Enabling %lu: %s\n", idx, entropy_sources[idx].rng_name);
+		message(LOG_CONS|LOG_INFO, "Enabling %lu: %s (%s)\n", idx,
+			entropy_sources[idx].rng_name, entropy_sources[idx].rng_sname);
 		break;
 	case 'l':
 		arguments->list = true;
@@ -576,7 +640,8 @@ int main(int argc, char **argv)
 		for (i=0; i < ENT_MAX; i++) 
 			if (entropy_sources[i].init && entropy_sources[i].disabled == true) {
 				found = 1;
-				message(LOG_CONS|LOG_INFO, "%d: %s\n", i, entropy_sources[i].rng_name);
+				message(LOG_CONS|LOG_INFO, "%d: %s (%s)\n", i,
+					entropy_sources[i].rng_name, entropy_sources[i].rng_sname);
 			}
 		if (!found)
 			message(LOG_CONS|LOG_INFO, "None");
@@ -607,7 +672,8 @@ int main(int argc, char **argv)
 		for (i=0; i < ENT_MAX; i++) 
 			if (entropy_sources[i].init && entropy_sources[i].disabled == false) {
 				rc = 1;
-				message(LOG_CONS|LOG_INFO, "%d: %s\n", i, entropy_sources[i].rng_name);
+				message(LOG_CONS|LOG_INFO, "%d: %s (%s)\n", i,
+					entropy_sources[i].rng_name, entropy_sources[i].rng_sname);
 			}
 
 		close_all_entropy_sources();

From caef8cce97396adc8c60749a0ce6ac039b57859a Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Wed, 12 Sep 2018 12:09:50 -0400
Subject: [PATCH 15/16] tpm: deprecate tpm entropy source

The tpm entropy source only support tpm 1.2 hardware, and while we could
update it to support the tpm 2.0 spec, theres no need, as the kernel
exports tpm entropy vi /dev/hwrng, which is already an available rngd
entropy source.  Depreceate this source now and remove it two releases
from now

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.c           | 1 +
 rngd_entsource.c | 3 +++
 2 files changed, 4 insertions(+)

diff --git a/rngd.c b/rngd.c
index 1fbd94e..7b85d76 100644
--- a/rngd.c
+++ b/rngd.c
@@ -212,6 +212,7 @@ static struct rng entropy_sources[ENT_MAX] = {
 		.xread          = xread_tpm,
 		.init           = init_tpm_entropy_source,
 		.rng_options	= NULL,
+		.disabled	= true,
 	},
 	{
 		.rng_name       = "Intel RDRAND Instruction RNG",
diff --git a/rngd_entsource.c b/rngd_entsource.c
index e96cb0e..63139ec 100644
--- a/rngd_entsource.c
+++ b/rngd_entsource.c
@@ -207,6 +207,9 @@ int init_entropy_source(struct rng *ent_src)
  */
 int init_tpm_entropy_source(struct rng *ent_src)
 {
+	message(LOG_CONS|LOG_INFO, "The TPM entropy source only supports TPM1.2 hardware and is "
+		"deprecated.  TPM2.0 and later hardware exports entropy via /dev/hwrng, which "
+		"can be collected via the hwrng entropy source in rngd\n"); 
 	ent_src->rng_fd = open(ent_src->rng_fname, O_RDWR);
 	if (ent_src->rng_fd == -1) {
 		message(LOG_DAEMON|LOG_DEBUG,"Unable to open file: %s",ent_src->rng_fname);

From 4405fbaeb8a9c5827ee699b2e12b9ffb7212cc94 Mon Sep 17 00:00:00 2001
From: Neil Horman <nhorman@tuxdriver.com>
Date: Wed, 12 Sep 2018 12:15:12 -0400
Subject: [PATCH 16/16] man: document the short name feature in the man page

No one will use it if its not documented

Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
---
 rngd.8.in | 24 +++++++++++++-----------
 1 file changed, 13 insertions(+), 11 deletions(-)

diff --git a/rngd.8.in b/rngd.8.in
index 4df8e6c..3bc5584 100644
--- a/rngd.8.in
+++ b/rngd.8.in
@@ -60,15 +60,15 @@ sources is 0 if at least 1 entropy source was found and initialized, 1
 otherwise.
 .TP
 \fB\-x\fR, \fB\-\-exclude\fR
-Disable entropy sources based on index reported from --list option
+Disable entropy sources based on index or (shortname) reported from --list option
 .TP
 \fB\-n\fR, \fB\-\-include\fR
-Enable entropy sources based on index reported from --list option
+Enable entropy sources based on index or (shortname) reported from --list option
 .TP
 \fB\-O\fR, \fB\-\-option\fR
 Provide specific config options to individual entropy sources, in the format
---option index:key:value.  See Entropy Sources section below for indicies and
-source specific options.  Note that specifying \fB-O <index>\fR will print the
+--option [index|shortname]:key:value.  See Entropy Sources section below for indicies and
+source specific options.  Note that specifying \fB-O [<index>|<shortname>]\fR will print the
 available options for that index to the console
 .TP
 \fB\-p\fI file\fR, \fB\-\-pid-file=\fIfile\fR
@@ -116,18 +116,20 @@ Print program version
 ENTROPY SOURCES
 .TP
 .B
-Hardware RNG [Index 0]
+Hardware RNG (hwrng) [Index 0]
 The Hardware RNG is a generic entropy source that draws entropy from a hardware
 rng attached by default to /dev/hwrng
 
 .TP
 .B
-TPM [Index 1]
-Entropy drawn from on board TPM device
+TPM (tpm) [Index 1]
+Entropy drawn from on board TPM device.  Note this entropy source is deprecated
+and will be removed soon, as newer tpm devices export entropy via /dev/hwrng,
+which is collected by the hwrng source above
 
 .TP
 .B
-RDRAND/RDSEED [Index 2]
+RDRAND/RDSEED (rdrand) [Index 2]
 Entropy drawn from the RDRAND and RDSEED instructions (x86 only)
 .TP
 Options
@@ -137,7 +139,7 @@ if all entropy is drawn directly from rdrand instruction (default 1)
 
 .TP
 .B
-DARN [Index 3]
+DARN (darn) [Index 3]
 Entropy drawn from the DARN instruction (ppc64 only)
 .TP
 Options
@@ -148,7 +150,7 @@ the entropy poll, or if it is used as a periodic seed to an aes based cprng
 
 .TP
 .B
-NIST Entropy Beacon [Index 4]
+NIST Entropy Beacon (nist) [Index 4]
 Entropy gathered from the NIST network entropy beacon.  Note that this entropy
 source is disabled by default as it should never be used for cryptographic
 purposes, or any use case in which random data should be known only by a single
@@ -156,7 +158,7 @@ entity.
 
 .TP
 .B
-JITTER [Index 5]
+JITTER (jitter) [Index 5]
 Entropy gathered by measuring timing variance of operations on the local cpu
 .TP
 Options
