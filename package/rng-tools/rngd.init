#!/bin/sh

. /etc/rc.conf

PIDFILE="/var/run/rngd.pid"

HWRNG_DEVICE="/dev/hwrng"

valid_hwrng_device()
{
  local rng_current

  if [ -e $HWRNG_DEVICE ]; then
    if [ -e /sys/class/misc/hw_random/rng_current ]; then
      rng_current="$(cat /sys/class/misc/hw_random/rng_current)"
      if [ "${rng_current:-none}" != "none" ]; then
        return 0
      fi
    fi
  fi

  return 1
}

init () {

  if [ "$HWRNG_MODULE" = "no" ]; then
    exit
  fi

  ## No need to load a module if HWRNG_DEVICE exists
  if [ -e $HWRNG_DEVICE ]; then
    return
  fi

  ## Load a module to create HWRNG_DEVICE
  if [ -n "$HWRNG_MODULE" ]; then
    modprobe "$HWRNG_MODULE"
  elif grep -q "astlinux=genx86_64-vm" /proc/cmdline; then
    modprobe virtio-rng
  fi
}

start () {

  if [ "$HWRNG_MODULE" != "no" ]; then
    echo "Starting rngd..."

    if valid_hwrng_device; then
      ## Exclude Intel RDRAND (rdrand) and jitterentropy (jitter)
      ARGS="-r $HWRNG_DEVICE -x rdrand -x jitter"
    else
      ## Exclude Hardware RNG Device (hwrng)
      ARGS="-x hwrng"
      if grep -q '^flags.*:.* rdrand ' /proc/cpuinfo; then
        ## Exclude jitterentropy (jitter) if we have Intel RDRAND (rdrand) support
        ARGS="$ARGS -x jitter"
      else
        ## Disable Intel RDRAND (rdrand)
        ARGS="$ARGS -x rdrand"
      fi
    fi

    start-stop-daemon -S -x /usr/sbin/rngd -p $PIDFILE -m -b -- -f -q $ARGS

    ## Wait until we have acceptable entropy
    if [ -f /proc/sys/kernel/random/entropy_avail ]; then
      cnt=10
      while [ $cnt -gt 0 ] && [ $(cat /proc/sys/kernel/random/entropy_avail) -lt 256 ]; do
        cnt=$((cnt - 1))
        sleep 1
      done
      entropy_avail="$(cat /proc/sys/kernel/random/entropy_avail)"
      if [ $cnt -eq 0 -a $entropy_avail -lt 256 ]; then
        echo "rngd: System available entropy is low: $entropy_avail" >&2
      fi
    fi
  fi
}

stop () {

  if [ -f $PIDFILE ]; then
    echo "Stopping rngd..."

    start-stop-daemon -K -q -n rngd -p $PIDFILE -s TERM
    rm -f $PIDFILE
  fi
}

case $1 in

start)
  start
  ;;

stop)
  stop
  ;;

init)
  init
  start
  ;;

restart)
  stop
  sleep 2
  start
  ;;

*)
  echo "Usage: start|stop|restart"
  ;;

esac

