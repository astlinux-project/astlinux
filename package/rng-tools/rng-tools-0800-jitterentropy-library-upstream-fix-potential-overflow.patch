From c4d805974d5bbcb06f2100a12373ba847350ac51 Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Sat, 7 Aug 2021 23:02:12 +0200
Subject: [PATCH] JENT: Fix potentially overflowing expression

Fix potentially overflowing expression "1U << min" with type "unsigned int"
(32 bits, unsigned) which is evaluated using 32-bit arithmetic, and then used
in a context that expects an expression of type "uint64_t" (64 bits, unsigned).

This was reported by a covscan (Coverity Scan static analysis tool).

The use of UINT64_C(1) is considered the appropriate solution as that forces
the literal value to be of the correct type.

In addition, a compile-time check is added to make sure the input
parameters to jent_loop_shuffle cannot overflow the bit shift.

Suggested-by: Vladis Dronov
Suggested-by: Joshua Hill
Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 src/jitterentropy-noise.c | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/src/jitterentropy-noise.c b/src/jitterentropy-noise.c
index 6c098b2..bf76551 100644
--- a/jitterentropy-library/src/jitterentropy-noise.c
+++ b/jitterentropy-library/src/jitterentropy-noise.c
@@ -23,6 +23,8 @@
 #include "jitterentropy-timer.h"
 #include "jitterentropy-sha3.h"
 
+#define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
+
 /***************************************************************************
  * Noise sources
  ***************************************************************************/
@@ -46,14 +48,14 @@ static uint64_t jent_loop_shuffle(struct rand_data *ec,
 	(void)ec;
 	(void)bits;
 
-	return (1U<<min);
+	return (UINT64_C(1)<<min);
 
 #else /* JENT_CONF_DISABLE_LOOP_SHUFFLE */
 
 	uint64_t time = 0;
 	uint64_t shuffle = 0;
 	unsigned int i = 0;
-	unsigned int mask = (1U<<bits) - 1;
+	unsigned int mask = (UINT64_C(1)<<bits) - 1;
 
 	/*
 	 * Mix the current state of the random number into the shuffle
@@ -77,7 +79,7 @@ static uint64_t jent_loop_shuffle(struct rand_data *ec,
 	 * We add a lower boundary value to ensure we have a minimum
 	 * RNG loop count.
 	 */
-	return (shuffle + (1U<<min));
+	return (shuffle + (UINT64_C(1)<<min));
 
 #endif /* JENT_CONF_DISABLE_LOOP_SHUFFLE */
 }
@@ -106,6 +108,9 @@ static void jent_hash_time(struct rand_data *ec, uint64_t time,
 	uint64_t j = 0;
 #define MAX_HASH_LOOP 3
 #define MIN_HASH_LOOP 0
+
+	/* Ensure that macros cannot overflow jent_loop_shuffle() */
+	BUILD_BUG_ON((MAX_HASH_LOOP + MIN_HASH_LOOP) > 63);
 	uint64_t hash_loop_cnt =
 		jent_loop_shuffle(ec, MAX_HASH_LOOP, MIN_HASH_LOOP);
 
@@ -180,6 +185,9 @@ static void jent_memaccess(struct rand_data *ec, uint64_t loop_cnt)
 	uint64_t i = 0;
 #define MAX_ACC_LOOP_BIT 7
 #define MIN_ACC_LOOP_BIT 0
+
+	/* Ensure that macros cannot overflow jent_loop_shuffle() */
+	BUILD_BUG_ON((MAX_ACC_LOOP_BIT + MIN_ACC_LOOP_BIT) > 63);
 	uint64_t acc_loop_cnt =
 		jent_loop_shuffle(ec, MAX_ACC_LOOP_BIT, MIN_ACC_LOOP_BIT);
 
From 6468e21bd1e79132fb3375d55b8b4150791f2790 Mon Sep 17 00:00:00 2001
From: Vladis Dronov <vdronov@redhat.com>
Date: Tue, 17 Aug 2021 18:57:37 +0200
Subject: [PATCH] Fix a variable type

mask should be uint64_t and not unsigned int in jent_loop_shuffle(),
since it is used in bitwise operations with time and shuffle.

Signed-off-by: Vladis Dronov <vdronov@redhat.com>
Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 src/jitterentropy-noise.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/jitterentropy-noise.c b/src/jitterentropy-noise.c
index 45d02e6..331911b 100644
--- a/jitterentropy-library/src/jitterentropy-noise.c
+++ b/jitterentropy-library/src/jitterentropy-noise.c
@@ -54,8 +54,8 @@ static uint64_t jent_loop_shuffle(struct rand_data *ec,
 
 	uint64_t time = 0;
 	uint64_t shuffle = 0;
+	uint64_t mask = (UINT64_C(1)<<bits) - 1;
 	unsigned int i = 0;
-	unsigned int mask = (UINT64_C(1)<<bits) - 1;
 
 	/*
 	 * Mix the current state of the random number into the shuffle
