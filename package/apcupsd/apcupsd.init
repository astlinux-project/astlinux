#!/bin/sh

# Disable if ups or upsmon is running
if [ -f /var/run/ups/upsd.pid -o -f /var/run/upsmon.pid ]; then
  exit 0
fi

. /etc/rc.conf

MANUAL_CONF="/mnt/kd/apcupsd/apcupsd.conf"

init ()
{
  if [ -n "$UPSTYPE" -a -n "$UPSCABLE" ] || [ -f "$MANUAL_CONF" ]; then

    isusb=0
    if [ -f "$MANUAL_CONF" ] && grep -q '^UPSTYPE *usb' "$MANUAL_CONF"; then
      isusb=1
    elif [ "$UPSTYPE" = "usb" ]; then
      isusb=1
    fi
    if [ $isusb -eq 1 ] && [ ! -e /dev/usb/hiddev0 ]; then
      mkdir -p /dev/usb
      for i in $(seq 0 15); do
        mknod /dev/usb/hiddev${i} c 180 $(($i+96))
      done
    fi

    mkdir -p /tmp/etc/apcupsd

    if [ -d /stat/etc/apcupsd ]; then
      cp -a /stat/etc/apcupsd/. /tmp/etc/apcupsd
    fi

    if [ -d /mnt/kd/apcupsd ]; then
      cp -a /mnt/kd/apcupsd/. /tmp/etc/apcupsd
    fi

    if [ ! -f "$MANUAL_CONF" ]; then

      if [ -n "$UPSDEVICE" ]; then
        DEVICE="$UPSDEVICE"
      else
        DEVICE=""
      fi

      if [ "$UPSCABLE" = "ether" ]; then
        POLLTIME="10"
      else
        POLLTIME="60"
      fi

      echo "## apcupsd.conf v1.1 ##
# Autogenerated.  Do not edit.
# A manually generated apcupsd config will use $MANUAL_CONF if it exists.

UPSNAME $HOSTNAME-ups
UPSCABLE $UPSCABLE
UPSTYPE $UPSTYPE
DEVICE $DEVICE
POLLTIME $POLLTIME

LOCKFILE /var/lock
ONBATTERYDELAY 6
BATTERYLEVEL 10
MINUTES 5
TIMEOUT 0
ANNOY 300
NOLOGON disable
KILLDELAY 0
NETSERVER on
NISIP 127.0.0.1
NISPORT 3551
EVENTSFILE /var/log/apcupsd.events
EVENTSFILEMAX 10
UPSCLASS standalone
UPSMODE disable
STATTIME 0
STATFILE /var/log/apcupsd.status
LOGSTATS off
DATATIME 0" > /tmp/etc/apcupsd/apcupsd.conf
    fi
  elif [ -f /etc/apcupsd/apcupsd.conf ]; then
    rm -f /tmp/etc/apcupsd/apcupsd.conf
  fi
}

start ()
{
  if [ -f /etc/apcupsd/apcupsd.conf ]; then
    echo "Starting apcupsd..."
    /usr/sbin/apcupsd
  fi
}

stop ()
{
  if [ -f /var/run/apcupsd.pid ]; then
    echo "Stopping apcupsd..."

    # See if this is a powerfail situation and we want to kill power
    if [ "$UPS_KILL_POWER" = "yes" -a -f /etc/apcupsd/powerfail ]; then
      echo "#################################################################"
      echo "#  Ordering UPS to kill power after a delay (~ 60 secs).        #"
      echo "#                                                               #"
      echo '#  Please ensure that the UPS has powered off before rebooting  #'
      echo '#  Otherwise, the UPS may cut the power during the reboot!!!    #'
      echo "#################################################################"
      # Wait so any network clients have an opportunity to poll while in powerfail mode
      cnt=15
      while [ $cnt -gt 0 ]; do
        cnt=$((cnt - 1))
        echo -n "."
        sleep 1
      done
    fi

    PID=$(cat /var/run/apcupsd.pid)
    killall apcupsd >/dev/null 2>&1
    sleep 1
    kill -KILL $PID >/dev/null 2>&1

    # Wait for all processes to finish
    cnt=10
    while [ $cnt -gt 0 ] && ps | grep -q -e '[/]usr/sbin/apcupsd'; do
      cnt=$((cnt - 1))
      sleep 1
    done
    rm -f /var/run/apcupsd.pid

    if [ "$UPS_KILL_POWER" = "yes" -a -f /etc/apcupsd/powerfail ]; then
      cnt=5
      while [ $cnt -gt 0 ]; do
        cnt=$((cnt - 1))
        echo -n "."
        sleep 1
      done
      if /usr/sbin/apcupsd --killpower >/dev/null 2>&1; then
        echo "UPS Ordered to Kill Power"
      else
        echo "Kill Power Failed"
      fi
    fi
  fi
}

case $1 in

start)
  start
  ;;

stop)
  stop
  ;;

init)
  init
  start
  ;;

restart)
  stop
  sleep 2
  start
  ;;

*)
  echo "Usage: start|stop|restart"
  ;;

esac
