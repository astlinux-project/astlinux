From f1699b50f8d6fd305d181a7a817f821c570f18d9 Mon Sep 17 00:00:00 2001
From: Martin Lambers <marlam@marlam.de>
Date: Mon, 1 Jun 2020 22:56:49 +0200
Subject: [PATCH] Add undisclosed_recipient option.

This replaces To, Cc, and Bcc with a single header line "To: undisclosed-recipients:;".

Based on ideas by Lonnie Abelbeck. Thanks!
---
 src/conf.c                         | 26 +++++++++++++
 src/conf.h                         |  8 ++--
 src/msmtp.c                        | 53 ++++++++++++++++++++------
 src/smtp.c                         | 61 ++++++++++++++++++++++++++----
 src/smtp.h                         | 15 +++-----
 9 files changed, 156 insertions(+), 33 deletions(-)

diff --git a/src/conf.c b/src/conf.c
index a0e3eb3..aedbd18 100644
--- a/src/conf.c
+++ b/src/conf.c
@@ -103,6 +103,7 @@ account_t *account_new(const char *conffile, const char *id)
     a->set_from_header = 2;
     a->set_date_header = 2;
     a->remove_bcc_headers = 1;
+    a->undisclosed_recipients = 0;
     a->source_ip = NULL;
     a->socketname = NULL;
     return a;
@@ -192,6 +193,7 @@ account_t *account_copy(account_t *acc)
         a->set_from_header = acc->set_from_header;
         a->set_date_header = acc->set_date_header;
         a->remove_bcc_headers = acc->remove_bcc_headers;
+        a->undisclosed_recipients = acc->undisclosed_recipients;
         a->source_ip = acc->source_ip ? xstrdup(acc->source_ip) : NULL;
         a->socketname = acc->socketname ? xstrdup(acc->socketname) : NULL;
     }
@@ -697,6 +699,10 @@ void override_account(account_t *acc1, account_t *acc2)
     {
         acc1->remove_bcc_headers = acc2->remove_bcc_headers;
     }
+    if (acc2->mask & ACC_UNDISCLOSED_RECIPIENTS)
+    {
+        acc1->undisclosed_recipients = acc2->undisclosed_recipients;
+    }
     if (acc2->mask & ACC_LOGFILE)
     {
         free(acc1->logfile);
@@ -1884,6 +1890,26 @@ int read_conffile(const char *conffile, FILE *f, list_t **acc_list,
                 break;
             }
         }
+        else if (strcmp(cmd, "undisclosed_recipients") == 0)
+        {
+            acc->mask |= ACC_UNDISCLOSED_RECIPIENTS;
+            if (*arg == '\0' || is_on(arg))
+            {
+                acc->undisclosed_recipients = 1;
+            }
+            else if (is_off(arg))
+            {
+                acc->undisclosed_recipients = 0;
+            }
+            else
+            {
+                *errstr = xasprintf(
+                        _("line %d: invalid argument %s for command %s"),
+                        line, arg, cmd);
+                e = CONF_ESYNTAX;
+                break;
+            }
+        }
         else if (strcmp(cmd, "source_ip") == 0)
         {
             acc->mask |= ACC_SOURCE_IP;
diff --git a/src/conf.h b/src/conf.h
index 8cb0268..d62081f 100644
--- a/src/conf.h
+++ b/src/conf.h
@@ -79,9 +79,10 @@
 #define ACC_SET_FROM_HEADER             (1LL << 31LL)
 #define ACC_SET_DATE_HEADER             (1LL << 32LL)
 #define ACC_REMOVE_BCC_HEADERS          (1LL << 33LL)
-#define ACC_SOURCE_IP                   (1LL << 34LL)
-#define ACC_LOGFILE_TIME_FORMAT         (1LL << 35LL)
-#define ACC_SOCKET                      (1LL << 36LL)
+#define ACC_UNDISCLOSED_RECIPIENTS      (1LL << 34LL)
+#define ACC_SOURCE_IP                   (1LL << 35LL)
+#define ACC_LOGFILE_TIME_FORMAT         (1LL << 36LL)
+#define ACC_SOCKET                      (1LL << 37LL)
 
 typedef struct
 {
@@ -137,6 +138,7 @@ typedef struct
     int set_from_header;        /* 0=off, 1=on, 2=auto */
     int set_date_header;        /* 0=off,       2=auto */
     int remove_bcc_headers;     /* remove the Bcc headers from the mail? */
+    int undisclosed_recipients; /* remove To, Cc, Bcc, add anonymous To */
     /* source ip binding */
     char *source_ip;            /* Source IP to bind the connection to */
     /* unix domain socket */
diff --git a/src/msmtp.c b/src/msmtp.c
index be96be8..a6a0990 100644
--- a/src/msmtp.c
+++ b/src/msmtp.c
@@ -1480,7 +1480,7 @@ int msmtp_sendmail(account_t *acc, list_t *recipients,
     {
         /* first: prepended headers, if any */
         if ((e = smtp_send_mail(&srv, prepend_header_file,
-                        1, 1, mailsize,
+                        1, 1, 1, 1, mailsize,
                         errstr)) != SMTP_EOK)
         {
             msmtp_endsession(&srv, 0);
@@ -1490,8 +1490,11 @@ int msmtp_sendmail(account_t *acc, list_t *recipients,
     }
     /* next: original mail headers */
     if ((e = smtp_send_mail(&srv, header_file,
-                    !prepend_header_contains_from,
-                    !acc->remove_bcc_headers,
+                    !prepend_header_contains_from, /* keep_from */
+                    !acc->undisclosed_recipients,  /* keep_to */
+                    !acc->undisclosed_recipients,  /* keep_cc */
+                    !acc->undisclosed_recipients
+                    && !acc->remove_bcc_headers,   /* keep_bcc */
                     mailsize, errstr)) != SMTP_EOK)
     {
         msmtp_endsession(&srv, 0);
@@ -1499,7 +1502,7 @@ int msmtp_sendmail(account_t *acc, list_t *recipients,
         return e;
     }
     /* then: the body from the original file */
-    if ((e = smtp_send_mail(&srv, f, 1, 1, mailsize, errstr)) != SMTP_EOK)
+    if ((e = smtp_send_mail(&srv, f, 1, 1, 1, 1, mailsize, errstr)) != SMTP_EOK)
     {
         msmtp_endsession(&srv, 0);
         e = smtp_exitcode(e);
@@ -2234,6 +2237,8 @@ void msmtp_print_help(void)
     printf(_("  --set-from-header[=(auto|on|off)] set From header handling\n"));
     printf(_("  --set-date-header[=(auto|off)] set Date header handling\n"));
     printf(_("  --remove-bcc-headers[=(on|off)] enable/disable removal of Bcc headers\n"));
+    printf(_("  --undisclosed-recipients[=(on|off)] enable/disable replacement of To/Cc/Bcc\n"
+             "                               with To: undisclosed-recipients:;\n"));
     printf(_("  --                           end of options\n"));
     printf(_("Accepted but ignored: -A, -B, -bm, -F, -G, -h, -i, -L, -m, -n, -O, -o, -v\n"));
     printf(_("\nReport bugs to <%s>.\n"), PACKAGE_BUGREPORT);
@@ -2308,12 +2313,13 @@ typedef struct
 #define LONGONLYOPT_ADD_MISSING_FROM_HEADER     (256 + 31)
 #define LONGONLYOPT_ADD_MISSING_DATE_HEADER     (256 + 32)
 #define LONGONLYOPT_REMOVE_BCC_HEADERS          (256 + 33)
-#define LONGONLYOPT_SOURCE_IP                   (256 + 34)
-#define LONGONLYOPT_LOGFILE_TIME_FORMAT         (256 + 35)
-#define LONGONLYOPT_CONFIGURE                   (256 + 36)
-#define LONGONLYOPT_SOCKET                      (256 + 37)
-#define LONGONLYOPT_SET_FROM_HEADER             (256 + 38)
-#define LONGONLYOPT_SET_DATE_HEADER             (256 + 39)
+#define LONGONLYOPT_UNDISCLOSED_RECIPIENTS      (256 + 34)
+#define LONGONLYOPT_SOURCE_IP                   (256 + 35)
+#define LONGONLYOPT_LOGFILE_TIME_FORMAT         (256 + 36)
+#define LONGONLYOPT_CONFIGURE                   (256 + 37)
+#define LONGONLYOPT_SOCKET                      (256 + 38)
+#define LONGONLYOPT_SET_FROM_HEADER             (256 + 39)
+#define LONGONLYOPT_SET_DATE_HEADER             (256 + 40)
 
 int msmtp_cmdline(msmtp_cmdline_conf_t *conf, int argc, char *argv[])
 {
@@ -2376,6 +2382,8 @@ int msmtp_cmdline(msmtp_cmdline_conf_t *conf, int argc, char *argv[])
             LONGONLYOPT_SET_DATE_HEADER },
         { "remove-bcc-headers", optional_argument, 0,
             LONGONLYOPT_REMOVE_BCC_HEADERS },
+        { "undisclosed-recipients", optional_argument, 0,
+            LONGONLYOPT_UNDISCLOSED_RECIPIENTS },
         { "source-ip", required_argument, 0, LONGONLYOPT_SOURCE_IP },
         { "socket", required_argument, 0, LONGONLYOPT_SOCKET },
         { "keepbcc", optional_argument, 0, LONGONLYOPT_KEEPBCC },
@@ -3105,6 +3113,24 @@ int msmtp_cmdline(msmtp_cmdline_conf_t *conf, int argc, char *argv[])
                 conf->cmdline_account->mask |= ACC_REMOVE_BCC_HEADERS;
                 break;
 
+            case LONGONLYOPT_UNDISCLOSED_RECIPIENTS:
+                if (!optarg || is_on(optarg))
+                {
+                    conf->cmdline_account->undisclosed_recipients = 1;
+                }
+                else if (is_off(optarg))
+                {
+                    conf->cmdline_account->undisclosed_recipients = 0;
+                }
+                else
+                {
+                    print_error(_("invalid argument %s for %s"),
+                            optarg, "--undisclosed-recipients");
+                    error_code = 1;
+                }
+                conf->cmdline_account->mask |= ACC_UNDISCLOSED_RECIPIENTS;
+                break;
+
             case LONGONLYOPT_SOURCE_IP:
                 free(conf->cmdline_account->source_ip);
                 if (*optarg)
@@ -3987,7 +4013,8 @@ int main(int argc, char *argv[])
     if (conf.sendmail)
     {
         int prepend_header_contains_from = 0;
-        if (account->set_from_header == 1
+        if (account->undisclosed_recipients
+                || account->set_from_header == 1
                 || (!have_from_header && account->set_from_header == 2)
                 || (!have_date_header && account->set_date_header == 2))
         {
@@ -4013,6 +4040,10 @@ int main(int argc, char *argv[])
             }
             prepend_header_contains_from = 1;
         }
+        if (account->undisclosed_recipients)
+        {
+            fputs("To: undisclosed-recipients:;\n", prepend_header_tmpfile);
+        }
         if (!have_date_header && account->set_date_header == 2)
         {
             char rfc2822_timestamp[32];
diff --git a/src/smtp.c b/src/smtp.c
index 2f2b4f9..c409027 100644
--- a/src/smtp.c
+++ b/src/smtp.c
@@ -1680,7 +1680,7 @@ int smtp_send_envelope(smtp_server_t *srv,
  */
 
 int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
-        int keep_from, int keep_bcc,
+        int keep_from, int keep_to, int keep_cc, int keep_bcc,
         long *mailsize, char **errstr)
 {
     char bigbuffer[MAIL_BUFSIZE + 3];   /* buffer + leading dot + ending CRLF */
@@ -1690,6 +1690,8 @@ int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
     size_t send_len;
     int in_header;
     int in_from;
+    int in_to;
+    int in_cc;
     int in_bcc;
     int line_starts;
     int line_continues;
@@ -1699,6 +1701,8 @@ int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
     buffer = bigbuffer + 1;
     in_header = 1;
     in_from = 0;
+    in_to = 0;
+    in_cc = 0;
     in_bcc = 0;
     line_continues = 0;
     e = SMTP_EOK;
@@ -1754,7 +1758,7 @@ int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
                 if (!keep_from && strncasecmp(buffer, "From:", 5) == 0)
                 {
                     in_from = 1;
-                    /* remove From header by ignoring this line */
+                    /* remove header by ignoring this line */
                     continue;
                 }
                 else if (!keep_from && in_from)
@@ -1763,7 +1767,7 @@ int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
                      * whitespace" (RFC 2822, section 2.2.3) */
                     if (buffer[0] == '\t' || buffer[0] == ' ')
                     {
-                        /* remove Bcc header by ignoring this line */
+                        /* remove header by ignoring this line */
                         continue;
                     }
                     else
@@ -1771,10 +1775,50 @@ int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
                         in_from = 0;
                     }
                 }
-                else if (!keep_bcc && strncasecmp(buffer, "Bcc:", 4) == 0)
+                if (!keep_to && strncasecmp(buffer, "To:", 3) == 0)
+                {
+                    in_to = 1;
+                    /* remove header by ignoring this line */
+                    continue;
+                }
+                else if (!keep_to && in_to)
+                {
+                    /* continued header lines begin with "horizontal
+                     * whitespace" (RFC 2822, section 2.2.3) */
+                    if (buffer[0] == '\t' || buffer[0] == ' ')
+                    {
+                        /* remove header by ignoring this line */
+                        continue;
+                    }
+                    else
+                    {
+                        in_to = 0;
+                    }
+                }
+                if (!keep_cc && strncasecmp(buffer, "Cc:", 3) == 0)
+                {
+                    in_cc = 1;
+                    /* remove header by ignoring this line */
+                    continue;
+                }
+                else if (!keep_cc && in_cc)
+                {
+                    /* continued header lines begin with "horizontal
+                     * whitespace" (RFC 2822, section 2.2.3) */
+                    if (buffer[0] == '\t' || buffer[0] == ' ')
+                    {
+                        /* remove header by ignoring this line */
+                        continue;
+                    }
+                    else
+                    {
+                        in_cc = 0;
+                    }
+                }
+                if (!keep_bcc && strncasecmp(buffer, "Bcc:", 4) == 0)
                 {
                     in_bcc = 1;
-                    /* remove Bcc header by ignoring this line */
+                    /* remove header by ignoring this line */
                     continue;
                 }
                 else if (!keep_bcc && in_bcc)
@@ -1783,7 +1827,7 @@ int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
                      * whitespace" (RFC 2822, section 2.2.3) */
                     if (buffer[0] == '\t' || buffer[0] == ' ')
                     {
-                        /* remove Bcc header by ignoring this line */
+                        /* remove header by ignoring this line */
                         continue;
                     }
                     else
@@ -1794,9 +1838,10 @@ int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
             }
             else
             {
-                if ((!keep_from && in_from) || (!keep_bcc && in_bcc))
+                if ((!keep_from && in_from) || (!keep_to && in_to)
+                        || (!keep_cc && in_cc) || (!keep_bcc && in_bcc))
                 {
-                    /* remove From or Bcc header by ignoring this line */
+                    /* remove header by ignoring this line */
                     continue;
                 }
             }
diff --git a/src/smtp.h b/src/smtp.h
index 6bb0273..6805eed 100644
--- a/src/smtp.h
+++ b/src/smtp.h
@@ -305,14 +305,11 @@ int smtp_send_envelope(smtp_server_t *srv,
  * Sends a mail via the SMTP server 'srv'.
  * You can use this function more than once to send the mail in chunks.
  * When you're done, call smtp_end_mail().
- * keep_from:   See keep_bcc below, but applies to the From header.
- * keep_bcc:    Set this flag in one of the following situation:
- *              1. The mail data contains a Bcc header that you want to keep
- *                 (highly unlikely)
- *              2. The mail data contains no headers at all. This prevents
- *                 accidental removal of mail body contents.
- *              The default (unset) is to expect headers in the mail data and
- *              remove the Bcc header.
+ * keep_from, keep_to, keep_cc, keep_bcc:
+ * These flags signal if the corresponding header should be kept or removed.
+ * You typically want to set keep_from, keep_to, keep_cc, but not keep_bcc.
+ * You should set all flags when sending mail data without preceding headers,
+ * to avoid accidental removal of mail body contents.
  * mailf:       The file containing the mail
  * mailsize:    This counter will be increased by the number of bytes
  *              of the mail (as transferred to the SMTP server) in case
@@ -323,7 +320,7 @@ int smtp_send_envelope(smtp_server_t *srv,
  * Used error codes: SMTP_EIO
  */
 int smtp_send_mail(smtp_server_t *srv, FILE *mailf,
-        int keep_from, int keep_bcc,
+        int keep_from, int keep_to, int keep_cc, int keep_bcc,
         long *mailsize, char **errstr);
 
 /*
-- 
2.20.1

