--- msmtp-1.8.10/src/msmtp.c.orig	2020-05-18 08:28:11.457695011 -0500
+++ msmtp-1.8.10/src/msmtp.c	2020-05-22 10:57:44.092960377 -0500
@@ -2234,6 +2234,8 @@
     printf(_("  --set-from-header[=(auto|on|off)] set From header handling\n"));
     printf(_("  --set-date-header[=(auto|off)] set Date header handling\n"));
     printf(_("  --remove-bcc-headers[=(on|off)] enable/disable removal of Bcc headers\n"));
+    printf(_("  --undisclosed-recipients[=(on|off)] enable/disable rewrite of To/Cc headers\n"));
+    printf(_("                                      with undisclosed-recipients:;\n"));
     printf(_("  --                           end of options\n"));
     printf(_("Accepted but ignored: -A, -B, -bm, -F, -G, -h, -i, -L, -m, -n, -O, -o, -v\n"));
     printf(_("\nReport bugs to <%s>.\n"), PACKAGE_BUGREPORT);
@@ -2314,6 +2316,7 @@
 #define LONGONLYOPT_SOCKET                      (256 + 37)
 #define LONGONLYOPT_SET_FROM_HEADER             (256 + 38)
 #define LONGONLYOPT_SET_DATE_HEADER             (256 + 39)
+#define LONGONLYOPT_UNDISCLOSED_RECIPIENTS      (256 + 40)
 
 int msmtp_cmdline(msmtp_cmdline_conf_t *conf, int argc, char *argv[])
 {
@@ -2376,6 +2379,8 @@
             LONGONLYOPT_SET_DATE_HEADER },
         { "remove-bcc-headers", optional_argument, 0,
             LONGONLYOPT_REMOVE_BCC_HEADERS },
+        { "undisclosed-recipients", optional_argument, 0,
+            LONGONLYOPT_UNDISCLOSED_RECIPIENTS },
         { "source-ip", required_argument, 0, LONGONLYOPT_SOURCE_IP },
         { "socket", required_argument, 0, LONGONLYOPT_SOCKET },
         { "keepbcc", optional_argument, 0, LONGONLYOPT_KEEPBCC },
@@ -3105,6 +3110,24 @@
                 conf->cmdline_account->mask |= ACC_REMOVE_BCC_HEADERS;
                 break;
 
+            case LONGONLYOPT_UNDISCLOSED_RECIPIENTS:
+                if (!optarg || is_on(optarg))
+                {
+                    conf->cmdline_account->undisclosed_recipients = 1;
+                }
+                else if (is_off(optarg))
+                {
+                    conf->cmdline_account->undisclosed_recipients = 0;
+                }
+                else
+                {
+                    print_error(_("invalid argument %s for %s"),
+                            optarg, "--undisclosed-recipients");
+                    error_code = 1;
+                }
+                conf->cmdline_account->mask |= ACC_UNDISCLOSED_RECIPIENTS;
+                break;
+
             case LONGONLYOPT_SOURCE_IP:
                 free(conf->cmdline_account->source_ip);
                 if (*optarg)
@@ -3558,6 +3581,8 @@
                 : _("off"));
         printf("remove_bcc_headers = %s\n",
                 account->remove_bcc_headers ? _("on") : _("off"));
+        printf("undisclosed_recipients = %s\n",
+                account->undisclosed_recipients ? _("on") : _("off"));
         printf("dsn_notify = %s\n",
                 account->dsn_notify ? account->dsn_notify : _("(not set)"));
         printf("dsn_return = %s\n",
@@ -3938,6 +3963,50 @@
         goto exit;
     }
 
+#define HEADER_BUFSIZE 1024
+    /* rewrite headers */
+    if (conf.sendmail && account->undisclosed_recipients && header_tmpfile != NULL)
+    {
+        FILE *dup_header_tmpfile;
+        if (!(dup_header_tmpfile = tmpfile()))
+        {
+            print_error(_("cannot create temporary file: %s"),
+                    sanitize_string(strerror(errno)));
+            error_code = EX_IOERR;
+            goto exit;
+        }
+
+        char *line = xmalloc(HEADER_BUFSIZE);
+        while (fgets(line, HEADER_BUFSIZE, header_tmpfile) != NULL)
+        {
+            char *cur = line, *end = line + HEADER_BUFSIZE;
+            if (strncasecmp(line, "To:", 3) == 0 || strncasecmp(line, "Cc:", 3) == 0)
+            {
+                cur += 3;
+                (void)snprintf(cur, end - cur, " undisclosed-recipients:;\n");
+            }
+
+            if (fputs(line, dup_header_tmpfile) == EOF)
+            {
+                fclose(dup_header_tmpfile);
+                error_code = EX_IOERR;
+                free(line);
+                goto exit;
+            }
+        }
+        free(line);
+        fclose(header_tmpfile);
+        header_tmpfile = dup_header_tmpfile;
+
+        if (fseeko(header_tmpfile, 0, SEEK_SET) != 0)
+        {
+            print_error(_("cannot rewind temporary file: %s"),
+                    sanitize_string(strerror(errno)));
+            error_code = EX_IOERR;
+            goto exit;
+        }
+    }
+
     /* initialize libraries */
 #ifndef HAVE_SYSLOG
     if (conf.sendmail && account->syslog)
--- msmtp-1.8.10/src/conf.h.orig	2020-05-22 10:03:14.829613815 -0500
+++ msmtp-1.8.10/src/conf.h	2020-05-22 10:08:14.973370454 -0500
@@ -82,6 +82,7 @@
 #define ACC_SOURCE_IP                   (1LL << 34LL)
 #define ACC_LOGFILE_TIME_FORMAT         (1LL << 35LL)
 #define ACC_SOCKET                      (1LL << 36LL)
+#define ACC_UNDISCLOSED_RECIPIENTS      (1LL << 37LL)
 
 typedef struct
 {
@@ -137,6 +138,7 @@
     int set_from_header;        /* 0=off, 1=on, 2=auto */
     int set_date_header;        /* 0=off,       2=auto */
     int remove_bcc_headers;     /* remove the Bcc headers from the mail? */
+    int undisclosed_recipients; /* rewrite To/Cc headers to undisclosed-recipients:; */
     /* source ip binding */
     char *source_ip;            /* Source IP to bind the connection to */
     /* unix domain socket */
--- msmtp-1.8.10/src/conf.c.orig	2020-05-22 10:03:07.806301918 -0500
+++ msmtp-1.8.10/src/conf.c	2020-05-22 10:18:18.954093377 -0500
@@ -103,6 +103,7 @@
     a->set_from_header = 2;
     a->set_date_header = 2;
     a->remove_bcc_headers = 1;
+    a->undisclosed_recipients = 0;
     a->source_ip = NULL;
     a->socketname = NULL;
     return a;
@@ -192,6 +193,7 @@
         a->set_from_header = acc->set_from_header;
         a->set_date_header = acc->set_date_header;
         a->remove_bcc_headers = acc->remove_bcc_headers;
+        a->undisclosed_recipients = acc->undisclosed_recipients;
         a->source_ip = acc->source_ip ? xstrdup(acc->source_ip) : NULL;
         a->socketname = acc->socketname ? xstrdup(acc->socketname) : NULL;
     }
@@ -697,6 +699,10 @@
     {
         acc1->remove_bcc_headers = acc2->remove_bcc_headers;
     }
+    if (acc2->mask & ACC_UNDISCLOSED_RECIPIENTS)
+    {
+        acc1->undisclosed_recipients = acc2->undisclosed_recipients;
+    }
     if (acc2->mask & ACC_LOGFILE)
     {
         free(acc1->logfile);
@@ -1877,6 +1883,26 @@
             }
             else
             {
+                *errstr = xasprintf(
+                        _("line %d: invalid argument %s for command %s"),
+                        line, arg, cmd);
+                e = CONF_ESYNTAX;
+                break;
+            }
+        }
+        else if (strcmp(cmd, "undisclosed_recipients") == 0)
+        {
+            acc->mask |= ACC_UNDISCLOSED_RECIPIENTS;
+            if (*arg == '\0' || is_on(arg))
+            {
+                acc->undisclosed_recipients = 1;
+            }
+            else if (is_off(arg))
+            {
+                acc->undisclosed_recipients = 0;
+            }
+            else
+            {
                 *errstr = xasprintf(
                         _("line %d: invalid argument %s for command %s"),
                         line, arg, cmd);
