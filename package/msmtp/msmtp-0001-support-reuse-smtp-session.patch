+++ msmtp-1.8.11/src/msmtpd.c.orig	2020-06-08 16:00:45.481391632 -0500
+++ msmtp-1.8.11/src/msmtpd.c	2020-06-08 16:00:45.481391632 -0500
@@ -175,9 +175,9 @@
     char* cmd;
     char* tmpcmd;
     size_t cmd_blocks;
-    size_t cmd_index = 0;
-    int envfrom_was_handled = 0;
-    int recipient_was_seen = 0;
+    size_t cmd_index;
+    int envfrom_was_handled;
+    int recipient_was_seen;
     FILE* pipe;
     int pipe_status;
     size_t i;
@@ -193,6 +193,12 @@
     fprintf(out, "250 localhost\r\n");
     if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0)
         return 1;
+
+  for(;;) {
+    cmd_index = 0;
+    envfrom_was_handled = 0;
+    recipient_was_seen = 0;
+
     if (strncmp(buf, "MAIL FROM:", 10) != 0 && strcmp(buf, "QUIT") != 0) {
         fprintf(out, "500 Expected MAIL FROM:<addr> or QUIT\r\n");
         return 1;
@@ -302,10 +308,9 @@
     fprintf(out, "250 Ok, mail was piped\r\n");
     if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0)
         return 0; /* ignore missing QUIT */
-    if (strcmp(buf, "QUIT") != 0) {
-        fprintf(out, "500 Expected QUIT\r\n");
-        return 1;
-    }
+    if (strcmp(buf, "QUIT") == 0)
+        break;
+  }
     fprintf(out, "221 Bye\r\n");
     return 0;
 }
From 5be3e2b1ee46da2101dfd79ff4a069bfdf32e8dd Mon Sep 17 00:00:00 2001
From: Martin Lambers <marlam@marlam.de>
Date: Sun, 14 Jun 2020 12:21:49 +0200
Subject: [PATCH] msmtpd: minor simplification in SMTP session reuse support

---
 src/msmtpd.c | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/src/msmtpd.c b/src/msmtpd.c
index 215f2ca..10ed562 100644
--- a/src/msmtpd.c
+++ b/src/msmtpd.c
@@ -307,11 +307,8 @@ int msmtpd_session(FILE* in, FILE* out, const char* command)
 
     fprintf(out, "250 Ok, mail was piped\r\n");
     if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0)
-        return 0; /* ignore missing QUIT */
-    if (strcmp(buf, "QUIT") == 0)
-        break;
+        break; /* ignore missing QUIT */
   }
-    fprintf(out, "221 Bye\r\n");
     return 0;
 }
 
-- 
2.20.1

From 52561ec3e3c119e9ef609b667d025f4c7b94e1f8 Mon Sep 17 00:00:00 2001
From: Martin Lambers <marlam@marlam.de>
Date: Sun, 14 Jun 2020 12:23:47 +0200
Subject: [PATCH] msmtpd: update indentation / whitespace

---
 src/msmtpd.c | 190 +++++++++++++++++++++++++--------------------------
 1 file changed, 95 insertions(+), 95 deletions(-)

diff --git a/src/msmtpd.c b/src/msmtpd.c
index 10ed562..691b6c1 100644
--- a/src/msmtpd.c
+++ b/src/msmtpd.c
@@ -194,121 +194,121 @@ int msmtpd_session(FILE* in, FILE* out, const char* command)
     if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0)
         return 1;
 
-  for(;;) {
-    cmd_index = 0;
-    envfrom_was_handled = 0;
-    recipient_was_seen = 0;
-
-    if (strncmp(buf, "MAIL FROM:", 10) != 0 && strcmp(buf, "QUIT") != 0) {
-        fprintf(out, "500 Expected MAIL FROM:<addr> or QUIT\r\n");
-        return 1;
-    }
-    if (strcmp(buf, "QUIT") == 0) {
-        fprintf(out, "221 Bye\r\n");
-        return 0;
-    }
-    if (get_addr(buf + 10, addrbuf, 1, &addrlen) != 0) {
-        fprintf(out, "501 Invalid address\r\n");
-        return 1;
-    }
-
-    cmd_blocks = 1;
-    while (cmd_blocks * CMD_BLOCK_SIZE < strlen(command) + addrlen + 2 * SMTP_BUFSIZE)
-        cmd_blocks++;
-    cmd = malloc(cmd_blocks * CMD_BLOCK_SIZE);
-    if (!cmd) {
-        fprintf(out, "554 %s\r\n", strerror(ENOMEM));
-        return 1;
-    }
+    for (;;) {
+        cmd_index = 0;
+        envfrom_was_handled = 0;
+        recipient_was_seen = 0;
 
-    for (i = 0; command[i];) {
-        if (!envfrom_was_handled && command[i] == '%' && command[i + 1] == 'F') {
-            memcpy(cmd + cmd_index, addrbuf, addrlen);
-            cmd_index += addrlen;
-            i += 2;
-            envfrom_was_handled = 1;
-        } else {
-            cmd[cmd_index] = command[i];
-            cmd_index++;
-            i++;
+        if (strncmp(buf, "MAIL FROM:", 10) != 0 && strcmp(buf, "QUIT") != 0) {
+            fprintf(out, "500 Expected MAIL FROM:<addr> or QUIT\r\n");
+            return 1;
+        }
+        if (strcmp(buf, "QUIT") == 0) {
+            fprintf(out, "221 Bye\r\n");
+            return 0;
+        }
+        if (get_addr(buf + 10, addrbuf, 1, &addrlen) != 0) {
+            fprintf(out, "501 Invalid address\r\n");
+            return 1;
         }
-    }
-    fprintf(out, "250 Ok\r\n");
 
-    for (;;) {
-        if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0) {
-            free(cmd);
+        cmd_blocks = 1;
+        while (cmd_blocks * CMD_BLOCK_SIZE < strlen(command) + addrlen + 2 * SMTP_BUFSIZE)
+            cmd_blocks++;
+        cmd = malloc(cmd_blocks * CMD_BLOCK_SIZE);
+        if (!cmd) {
+            fprintf(out, "554 %s\r\n", strerror(ENOMEM));
             return 1;
         }
-        if (!recipient_was_seen) {
-            if (strncmp(buf, "RCPT TO:", 8) != 0) {
-                fprintf(out, "500 Expected RCPT TO:<addr>\r\n");
-                free(cmd);
-                return 1;
-            }
-        } else {
-            if (strncmp(buf, "RCPT TO:", 8) != 0 && strcmp(buf, "DATA") != 0) {
-                fprintf(out, "500 Expected RCPT TO:<addr> or DATA\r\n");
-                free(cmd);
-                return 1;
+
+        for (i = 0; command[i];) {
+            if (!envfrom_was_handled && command[i] == '%' && command[i + 1] == 'F') {
+                memcpy(cmd + cmd_index, addrbuf, addrlen);
+                cmd_index += addrlen;
+                i += 2;
+                envfrom_was_handled = 1;
+            } else {
+                cmd[cmd_index] = command[i];
+                cmd_index++;
+                i++;
             }
         }
-        if (strcmp(buf, "DATA") == 0) {
-            break;
-        } else {
-            if (get_addr(buf + 8, addrbuf, 0, &addrlen) != 0) {
-                fprintf(out, "501 Invalid address\r\n");
+        fprintf(out, "250 Ok\r\n");
+
+        for (;;) {
+            if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0) {
                 free(cmd);
                 return 1;
             }
-            if (cmd_index + 1 + addrlen + 1 >= cmd_blocks * CMD_BLOCK_SIZE) {
-                cmd_blocks++;
-                if (cmd_blocks > CMD_MAX_BLOCKS) {
-                    fprintf(out, "554 Too many recipients\r\n");
+            if (!recipient_was_seen) {
+                if (strncmp(buf, "RCPT TO:", 8) != 0) {
+                    fprintf(out, "500 Expected RCPT TO:<addr>\r\n");
                     free(cmd);
                     return 1;
                 }
-                tmpcmd = realloc(cmd, cmd_blocks * CMD_MAX_BLOCKS);
-                if (!tmpcmd) {
+            } else {
+                if (strncmp(buf, "RCPT TO:", 8) != 0 && strcmp(buf, "DATA") != 0) {
+                    fprintf(out, "500 Expected RCPT TO:<addr> or DATA\r\n");
+                    free(cmd);
+                    return 1;
+                }
+            }
+            if (strcmp(buf, "DATA") == 0) {
+                break;
+            } else {
+                if (get_addr(buf + 8, addrbuf, 0, &addrlen) != 0) {
+                    fprintf(out, "501 Invalid address\r\n");
                     free(cmd);
-                    fprintf(out, "554 %s\r\n", strerror(ENOMEM));
                     return 1;
                 }
-                cmd = tmpcmd;
+                if (cmd_index + 1 + addrlen + 1 >= cmd_blocks * CMD_BLOCK_SIZE) {
+                    cmd_blocks++;
+                    if (cmd_blocks > CMD_MAX_BLOCKS) {
+                        fprintf(out, "554 Too many recipients\r\n");
+                        free(cmd);
+                        return 1;
+                    }
+                    tmpcmd = realloc(cmd, cmd_blocks * CMD_MAX_BLOCKS);
+                    if (!tmpcmd) {
+                        free(cmd);
+                        fprintf(out, "554 %s\r\n", strerror(ENOMEM));
+                        return 1;
+                    }
+                    cmd = tmpcmd;
+                }
+                cmd[cmd_index++] = ' ';
+                memcpy(cmd + cmd_index, addrbuf, addrlen);
+                cmd_index += addrlen;
+                fprintf(out, "250 Ok\r\n");
+                recipient_was_seen = 1;
             }
-            cmd[cmd_index++] = ' ';
-            memcpy(cmd + cmd_index, addrbuf, addrlen);
-            cmd_index += addrlen;
-            fprintf(out, "250 Ok\r\n");
-            recipient_was_seen = 1;
         }
-    }
-    cmd[cmd_index++] = '\0';
+        cmd[cmd_index++] = '\0';
 
-    pipe = popen(cmd, "w");
-    free(cmd);
-    if (!pipe) {
-        fprintf(out, "554 Cannot start pipe command\r\n");
-        return 1;
-    }
-    fprintf(out, "354 Send data\r\n");
-    if (smtp_pipe(in, pipe, buf, SMTP_BUFSIZE) != 0) {
-        fprintf(out, "554 Cannot pipe mail to command\r\n");
-        return 1;
-    }
-    pipe_status = pclose(pipe);
-    if (pipe_status == -1 || !WIFEXITED(pipe_status)) {
-        fprintf(out, "554 Pipe command failed to execute\r\n");
-        return 1;
-    } else if (WEXITSTATUS(pipe_status) != 0) {
-        fprintf(out, "554 Pipe command reported error %d\r\n", WEXITSTATUS(pipe_status));
-        return 1;
-    }
+        pipe = popen(cmd, "w");
+        free(cmd);
+        if (!pipe) {
+            fprintf(out, "554 Cannot start pipe command\r\n");
+            return 1;
+        }
+        fprintf(out, "354 Send data\r\n");
+        if (smtp_pipe(in, pipe, buf, SMTP_BUFSIZE) != 0) {
+            fprintf(out, "554 Cannot pipe mail to command\r\n");
+            return 1;
+        }
+        pipe_status = pclose(pipe);
+        if (pipe_status == -1 || !WIFEXITED(pipe_status)) {
+            fprintf(out, "554 Pipe command failed to execute\r\n");
+            return 1;
+        } else if (WEXITSTATUS(pipe_status) != 0) {
+            fprintf(out, "554 Pipe command reported error %d\r\n", WEXITSTATUS(pipe_status));
+            return 1;
+        }
 
-    fprintf(out, "250 Ok, mail was piped\r\n");
-    if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0)
-        break; /* ignore missing QUIT */
-  }
+        fprintf(out, "250 Ok, mail was piped\r\n");
+        if (read_smtp_cmd(in, buf, SMTP_BUFSIZE) != 0)
+            break; /* ignore missing QUIT */
+    }
     return 0;
 }
 
-- 
2.20.1

